; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\fmc.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\fmc.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M480\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\fmc.crf ..\..\..\Library\StdDriver\src\fmc.c]
                          THUMB

                          AREA ||i.FMC_CheckAllOne||, CODE, READONLY, ALIGN=2

                  FMC_CheckAllOne PROC
;;;657      */
;;;658    uint32_t  FMC_CheckAllOne(uint32_t u32addr, uint32_t u32count)
000000  b530              PUSH     {r4,r5,lr}
;;;659    {
;;;660        uint32_t  ret = READ_ALLONE_CMD_FAIL;
;;;661    
;;;662        FMC->ISPSTS = 0x80UL;   /* clear check all one bit */
000002  4a12              LDR      r2,|L1.76|
000004  4604              MOV      r4,r0                 ;659
000006  2380              MOVS     r3,#0x80
000008  f04f30ff          MOV      r0,#0xffffffff        ;660
00000c  6413              STR      r3,[r2,#0x40]
;;;663    
;;;664        FMC->ISPCMD   = FMC_ISPCMD_RUN_ALL1;
00000e  2328              MOVS     r3,#0x28
000010  60d3              STR      r3,[r2,#0xc]
;;;665        FMC->ISPADDR  = u32addr;
000012  6054              STR      r4,[r2,#4]
;;;666        FMC->ISPDAT   = u32count;
000014  6091              STR      r1,[r2,#8]
;;;667        FMC->ISPTRG   = FMC_ISPTRG_ISPGO_Msk;
000016  2501              MOVS     r5,#1
000018  6115              STR      r5,[r2,#0x10]
                  |L1.26|
;;;668    
;;;669        while (FMC->ISPSTS & FMC_ISPSTS_ISPBUSY_Msk) { }
00001a  6c11              LDR      r1,[r2,#0x40]
00001c  07c9              LSLS     r1,r1,#31
00001e  d1fc              BNE      |L1.26|
;;;670    
;;;671        do
;;;672        {
;;;673            FMC->ISPCMD = FMC_ISPCMD_READ_ALL1;
000020  2308              MOVS     r3,#8
                  |L1.34|
000022  60d3              STR      r3,[r2,#0xc]
;;;674            FMC->ISPADDR    = u32addr;
000024  6054              STR      r4,[r2,#4]
;;;675            FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
000026  6115              STR      r5,[r2,#0x10]
                  |L1.40|
;;;676            while (FMC->ISPSTS & FMC_ISPSTS_ISPBUSY_Msk) { }
000028  6c11              LDR      r1,[r2,#0x40]
00002a  07c9              LSLS     r1,r1,#31
00002c  d1fc              BNE      |L1.40|
;;;677        }
;;;678        while (FMC->ISPDAT == 0UL);
00002e  6891              LDR      r1,[r2,#8]
000030  2900              CMP      r1,#0
000032  d0f6              BEQ      |L1.34|
;;;679    
;;;680        if (FMC->ISPDAT == READ_ALLONE_YES)
000034  6893              LDR      r3,[r2,#8]
000036  4906              LDR      r1,|L1.80|
000038  428b              CMP      r3,r1
00003a  d100              BNE      |L1.62|
;;;681        {
;;;682            ret = FMC->ISPDAT;
00003c  6890              LDR      r0,[r2,#8]
                  |L1.62|
;;;683        }
;;;684    
;;;685        if (FMC->ISPDAT == READ_ALLONE_NOT)
00003e  6891              LDR      r1,[r2,#8]
000040  4b04              LDR      r3,|L1.84|
000042  4299              CMP      r1,r3
000044  d100              BNE      |L1.72|
;;;686        {
;;;687            ret = FMC->ISPDAT;
000046  6890              LDR      r0,[r2,#8]
                  |L1.72|
;;;688        }
;;;689    
;;;690        return ret;
;;;691    }
000048  bd30              POP      {r4,r5,pc}
;;;692    
                          ENDP

00004a  0000              DCW      0x0000
                  |L1.76|
                          DCD      0x4000c000
                  |L1.80|
                          DCD      0xa11fffff
                  |L1.84|
                          DCD      0xa1100000

                          AREA ||i.FMC_Close||, CODE, READONLY, ALIGN=2

                  FMC_Close PROC
;;;31       */
;;;32     void FMC_Close(void)
000000  4802              LDR      r0,|L2.12|
;;;33     {
;;;34         FMC->ISPCTL &= ~FMC_ISPCTL_ISPEN_Msk;
000002  6801              LDR      r1,[r0,#0]
000004  f0210101          BIC      r1,r1,#1
000008  6001              STR      r1,[r0,#0]
;;;35     }
00000a  4770              BX       lr
;;;36     
                          ENDP

                  |L2.12|
                          DCD      0x4000c000

                          AREA ||i.FMC_CompareSPKey||, CODE, READONLY, ALIGN=2

                  FMC_CompareSPKey PROC
;;;795      */
;;;796    int32_t  FMC_CompareSPKey(uint32_t key[3])
000000  4911              LDR      r1,|L3.72|
;;;797    {
000002  4602              MOV      r2,r0
;;;798        uint32_t  u32KeySts;
;;;799        int32_t   ret = 0;
000004  2000              MOVS     r0,#0
;;;800    
;;;801        if (FMC->KPKEYSTS & FMC_KPKEYSTS_FORBID_Msk)
000006  6e0b              LDR      r3,[r1,#0x60]
000008  071b              LSLS     r3,r3,#28
00000a  d500              BPL      |L3.14|
;;;802        {
;;;803            /* FMC_CompareSPKey - FORBID!  */
;;;804            ret = -1;
00000c  1e40              SUBS     r0,r0,#1
                  |L3.14|
;;;805        }
;;;806    
;;;807        if (!(FMC->KPKEYSTS & FMC_KPKEYSTS_KEYLOCK_Msk))
00000e  6e0b              LDR      r3,[r1,#0x60]
000010  079b              LSLS     r3,r3,#30
000012  d402              BMI      |L3.26|
;;;808        {
;;;809            /* FMC_CompareSPKey - key is not locked!  */
;;;810            ret = -3;
000014  f06f0002          MVN      r0,#2
                  |L3.24|
;;;811        }
;;;812    
;;;813        if (ret == 0)
;;;814        {
;;;815            FMC->KPKEY0 = key[0];
;;;816            FMC->KPKEY1 = key[1];
;;;817            FMC->KPKEY2 = key[2];
;;;818            FMC->KPKEYTRG = FMC_KPKEYTRG_KPKEYGO_Msk | FMC_KPKEYTRG_TCEN_Msk;
;;;819    
;;;820            while (FMC->KPKEYSTS & FMC_KPKEYSTS_KEYBUSY_Msk) { }
;;;821    
;;;822            u32KeySts = FMC->KPKEYSTS;
;;;823    
;;;824            if (!(u32KeySts & FMC_KPKEYSTS_KEYMATCH_Msk))
;;;825            {
;;;826                /* Key mismatched! */
;;;827                ret = -2;
;;;828            }
;;;829            else if (u32KeySts & FMC_KPKEYSTS_KEYLOCK_Msk)
;;;830            {
;;;831                /* Key matched, but still be locked! */
;;;832                ret = -2;
;;;833            }
;;;834        }
;;;835        return ret;
;;;836    }
000018  4770              BX       lr
                  |L3.26|
00001a  2800              CMP      r0,#0                 ;813
00001c  d1fc              BNE      |L3.24|
00001e  6813              LDR      r3,[r2,#0]            ;815
000020  650b              STR      r3,[r1,#0x50]         ;815
000022  6853              LDR      r3,[r2,#4]            ;816
000024  654b              STR      r3,[r1,#0x54]         ;816
000026  6892              LDR      r2,[r2,#8]            ;817
000028  658a              STR      r2,[r1,#0x58]         ;817
00002a  2203              MOVS     r2,#3                 ;818
00002c  65ca              STR      r2,[r1,#0x5c]         ;818
                  |L3.46|
00002e  6e0a              LDR      r2,[r1,#0x60]         ;820
000030  07d2              LSLS     r2,r2,#31             ;820
000032  d1fc              BNE      |L3.46|
000034  6e09              LDR      r1,[r1,#0x60]         ;822
000036  f06f0301          MVN      r3,#1                 ;827
00003a  074a              LSLS     r2,r1,#29             ;824
00003c  d501              BPL      |L3.66|
00003e  0789              LSLS     r1,r1,#30             ;829
000040  d5ea              BPL      |L3.24|
                  |L3.66|
000042  4618              MOV      r0,r3                 ;827
000044  4770              BX       lr
;;;837    
                          ENDP

000046  0000              DCW      0x0000
                  |L3.72|
                          DCD      0x4000c000

                          AREA ||i.FMC_Erase||, CODE, READONLY, ALIGN=2

                  FMC_Erase PROC
;;;45       */
;;;46     int32_t FMC_Erase(uint32_t u32PageAddr)
000000  4603              MOV      r3,r0
;;;47     {
000002  b500              PUSH     {lr}
;;;48         int32_t  ret = 0;
000004  2000              MOVS     r0,#0
;;;49     
;;;50         if (u32PageAddr == FMC_SPROM_BASE)
000006  f5b31f00          CMP      r3,#0x200000
00000a  d103              BNE      |L4.20|
;;;51         {
;;;52             ret = FMC_Erase_SPROM();
00000c  f7fffffe          BL       FMC_Erase_SPROM
000010  2800              CMP      r0,#0
000012  d111              BNE      |L4.56|
                  |L4.20|
;;;53         }
;;;54     
;;;55         if (ret == 0)
;;;56         {
;;;57             FMC->ISPCMD = FMC_ISPCMD_PAGE_ERASE;
000014  4909              LDR      r1,|L4.60|
000016  2222              MOVS     r2,#0x22
000018  60ca              STR      r2,[r1,#0xc]
;;;58             FMC->ISPADDR = u32PageAddr;
00001a  604b              STR      r3,[r1,#4]
;;;59             FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
00001c  2201              MOVS     r2,#1
00001e  610a              STR      r2,[r1,#0x10]
                  |L4.32|
;;;60     
;;;61             while (FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) { }
000020  690a              LDR      r2,[r1,#0x10]
000022  07d2              LSLS     r2,r2,#31
000024  d1fc              BNE      |L4.32|
;;;62     
;;;63             if (FMC->ISPCTL & FMC_ISPCTL_ISPFF_Msk)
000026  680a              LDR      r2,[r1,#0]
000028  0652              LSLS     r2,r2,#25
00002a  d505              BPL      |L4.56|
;;;64             {
;;;65                 FMC->ISPCTL |= FMC_ISPCTL_ISPFF_Msk;
00002c  6808              LDR      r0,[r1,#0]
00002e  f0400040          ORR      r0,r0,#0x40
000032  6008              STR      r0,[r1,#0]
;;;66                 ret = -1;
000034  f04f30ff          MOV      r0,#0xffffffff
                  |L4.56|
;;;67             }
;;;68         }
;;;69         return ret;
;;;70     }
000038  bd00              POP      {pc}
;;;71     
                          ENDP

00003a  0000              DCW      0x0000
                  |L4.60|
                          DCD      0x4000c000

                          AREA ||i.FMC_Erase_Bank||, CODE, READONLY, ALIGN=2

                  FMC_Erase_Bank PROC
;;;130      */
;;;131    int32_t FMC_Erase_Bank(uint32_t u32BankAddr)
000000  4602              MOV      r2,r0
;;;132    {
;;;133        int32_t  ret = 0;
;;;134    
;;;135        FMC->ISPCMD = FMC_ISPCMD_BANK_ERASE;
000002  490a              LDR      r1,|L5.44|
000004  2000              MOVS     r0,#0                 ;133
000006  2323              MOVS     r3,#0x23
000008  60cb              STR      r3,[r1,#0xc]
;;;136        FMC->ISPADDR = u32BankAddr;
00000a  604a              STR      r2,[r1,#4]
;;;137        FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
00000c  2201              MOVS     r2,#1
00000e  610a              STR      r2,[r1,#0x10]
                  |L5.16|
;;;138    
;;;139        while (FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) { }
000010  690a              LDR      r2,[r1,#0x10]
000012  07d2              LSLS     r2,r2,#31
000014  d1fc              BNE      |L5.16|
;;;140    
;;;141        if (FMC->ISPCTL & FMC_ISPCTL_ISPFF_Msk)
000016  680a              LDR      r2,[r1,#0]
000018  0652              LSLS     r2,r2,#25
00001a  d505              BPL      |L5.40|
;;;142        {
;;;143            FMC->ISPCTL |= FMC_ISPCTL_ISPFF_Msk;
00001c  6808              LDR      r0,[r1,#0]
00001e  f0400040          ORR      r0,r0,#0x40
000022  6008              STR      r0,[r1,#0]
;;;144            ret = -1;
000024  f04f30ff          MOV      r0,#0xffffffff
                  |L5.40|
;;;145        }
;;;146        return ret;
;;;147    }
000028  4770              BX       lr
;;;148    
                          ENDP

00002a  0000              DCW      0x0000
                  |L5.44|
                          DCD      0x4000c000

                          AREA ||i.FMC_Erase_Block||, CODE, READONLY, ALIGN=2

                  FMC_Erase_Block PROC
;;;105      */
;;;106    int32_t FMC_Erase_Block(uint32_t u32BlockAddr)
000000  4602              MOV      r2,r0
;;;107    {
;;;108        int32_t  ret = 0;
;;;109    
;;;110        FMC->ISPCMD = FMC_ISPCMD_BLOCK_ERASE;
000002  490a              LDR      r1,|L6.44|
000004  2000              MOVS     r0,#0                 ;108
000006  2325              MOVS     r3,#0x25
000008  60cb              STR      r3,[r1,#0xc]
;;;111        FMC->ISPADDR = u32BlockAddr;
00000a  604a              STR      r2,[r1,#4]
;;;112        FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
00000c  2201              MOVS     r2,#1
00000e  610a              STR      r2,[r1,#0x10]
                  |L6.16|
;;;113    
;;;114        while (FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) { }
000010  690a              LDR      r2,[r1,#0x10]
000012  07d2              LSLS     r2,r2,#31
000014  d1fc              BNE      |L6.16|
;;;115    
;;;116        if (FMC->ISPCTL & FMC_ISPCTL_ISPFF_Msk)
000016  680a              LDR      r2,[r1,#0]
000018  0652              LSLS     r2,r2,#25
00001a  d505              BPL      |L6.40|
;;;117        {
;;;118            FMC->ISPCTL |= FMC_ISPCTL_ISPFF_Msk;
00001c  6808              LDR      r0,[r1,#0]
00001e  f0400040          ORR      r0,r0,#0x40
000022  6008              STR      r0,[r1,#0]
;;;119            ret = -1;
000024  f04f30ff          MOV      r0,#0xffffffff
                  |L6.40|
;;;120        }
;;;121        return ret;
;;;122    }
000028  4770              BX       lr
;;;123    
                          ENDP

00002a  0000              DCW      0x0000
                  |L6.44|
                          DCD      0x4000c000

                          AREA ||i.FMC_Erase_SPROM||, CODE, READONLY, ALIGN=2

                  FMC_Erase_SPROM PROC
;;;78       */
;;;79     int32_t FMC_Erase_SPROM(void)
000000  490b              LDR      r1,|L7.48|
;;;80     {
;;;81         int32_t  ret = 0;
000002  2000              MOVS     r0,#0
;;;82     
;;;83         FMC->ISPCMD = FMC_ISPCMD_PAGE_ERASE;
000004  2222              MOVS     r2,#0x22
000006  60ca              STR      r2,[r1,#0xc]
;;;84         FMC->ISPADDR = FMC_SPROM_BASE;
000008  f44f1200          MOV      r2,#0x200000
00000c  604a              STR      r2,[r1,#4]
;;;85         FMC->ISPDAT = 0x0055AA03UL;
00000e  4a09              LDR      r2,|L7.52|
000010  608a              STR      r2,[r1,#8]
;;;86         FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
000012  2201              MOVS     r2,#1
000014  610a              STR      r2,[r1,#0x10]
                  |L7.22|
;;;87     
;;;88         while (FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) { }
000016  690a              LDR      r2,[r1,#0x10]
000018  07d2              LSLS     r2,r2,#31
00001a  d1fc              BNE      |L7.22|
;;;89     
;;;90         if (FMC->ISPCTL & FMC_ISPCTL_ISPFF_Msk)
00001c  680a              LDR      r2,[r1,#0]
00001e  0652              LSLS     r2,r2,#25
000020  d505              BPL      |L7.46|
;;;91         {
;;;92             FMC->ISPCTL |= FMC_ISPCTL_ISPFF_Msk;
000022  6808              LDR      r0,[r1,#0]
000024  f0400040          ORR      r0,r0,#0x40
000028  6008              STR      r0,[r1,#0]
;;;93             ret = -1;
00002a  f04f30ff          MOV      r0,#0xffffffff
                  |L7.46|
;;;94         }
;;;95         return ret;
;;;96     }
00002e  4770              BX       lr
;;;97     
                          ENDP

                  |L7.48|
                          DCD      0x4000c000
                  |L7.52|
                          DCD      0x0055aa03

                          AREA ||i.FMC_GetBootSource||, CODE, READONLY, ALIGN=2

                  FMC_GetBootSource PROC
;;;154      */
;;;155    int32_t FMC_GetBootSource (void)
000000  4903              LDR      r1,|L8.16|
;;;156    {
;;;157        int32_t  ret = 0;
000002  2000              MOVS     r0,#0
;;;158    
;;;159        if (FMC->ISPCTL & FMC_ISPCTL_BS_Msk)
000004  6809              LDR      r1,[r1,#0]
000006  0789              LSLS     r1,r1,#30
000008  d500              BPL      |L8.12|
;;;160        {
;;;161            ret = 1;
00000a  2001              MOVS     r0,#1
                  |L8.12|
;;;162        }
;;;163    
;;;164        return ret;
;;;165    }
00000c  4770              BX       lr
;;;166    
                          ENDP

00000e  0000              DCW      0x0000
                  |L8.16|
                          DCD      0x4000c000

                          AREA ||i.FMC_GetChkSum||, CODE, READONLY, ALIGN=2

                  FMC_GetChkSum PROC
;;;619      */
;;;620    uint32_t  FMC_GetChkSum(uint32_t u32addr, uint32_t u32count)
000000  ea400201          ORR      r2,r0,r1
;;;621    {
;;;622        uint32_t   ret;
;;;623    
;;;624        if ((u32addr % 512UL) || (u32count % 512UL))
000004  05d2              LSLS     r2,r2,#23
000006  d002              BEQ      |L9.14|
;;;625        {
;;;626            ret = 0xFFFFFFFF;
000008  f04f30ff          MOV      r0,#0xffffffff
;;;627        }
;;;628        else
;;;629        {
;;;630            FMC->ISPCMD  = FMC_ISPCMD_RUN_CKS;
;;;631            FMC->ISPADDR = u32addr;
;;;632            FMC->ISPDAT  = u32count;
;;;633            FMC->ISPTRG  = FMC_ISPTRG_ISPGO_Msk;
;;;634    
;;;635            while (FMC->ISPSTS & FMC_ISPSTS_ISPBUSY_Msk) { }
;;;636    
;;;637            FMC->ISPCMD = FMC_ISPCMD_READ_CKS;
;;;638            FMC->ISPADDR    = u32addr;
;;;639            FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
;;;640    
;;;641            while (FMC->ISPSTS & FMC_ISPSTS_ISPBUSY_Msk) { }
;;;642    
;;;643            ret = FMC->ISPDAT;
;;;644        }
;;;645    
;;;646        return ret;
;;;647    }
00000c  4770              BX       lr
                  |L9.14|
00000e  4a09              LDR      r2,|L9.52|
000010  232d              MOVS     r3,#0x2d              ;630
000012  60d3              STR      r3,[r2,#0xc]          ;630
000014  6050              STR      r0,[r2,#4]            ;631
000016  6091              STR      r1,[r2,#8]            ;632
000018  2301              MOVS     r3,#1                 ;633
00001a  6113              STR      r3,[r2,#0x10]         ;633
                  |L9.28|
00001c  6c11              LDR      r1,[r2,#0x40]         ;635
00001e  07c9              LSLS     r1,r1,#31             ;635
000020  d1fc              BNE      |L9.28|
000022  210d              MOVS     r1,#0xd               ;637
000024  60d1              STR      r1,[r2,#0xc]          ;637
000026  6050              STR      r0,[r2,#4]            ;638
000028  6113              STR      r3,[r2,#0x10]         ;639
                  |L9.42|
00002a  6c10              LDR      r0,[r2,#0x40]         ;641
00002c  07c0              LSLS     r0,r0,#31             ;641
00002e  d1fc              BNE      |L9.42|
000030  6890              LDR      r0,[r2,#8]            ;643
000032  4770              BX       lr
;;;648    
                          ENDP

                  |L9.52|
                          DCD      0x4000c000

                          AREA ||i.FMC_Is_OTP_Locked||, CODE, READONLY, ALIGN=2

                  FMC_Is_OTP_Locked PROC
;;;531      */
;;;532    int32_t FMC_Is_OTP_Locked(uint32_t otp_num)
000000  4602              MOV      r2,r0
;;;533    {
;;;534        int32_t  ret = 0;
000002  2000              MOVS     r0,#0
;;;535    
;;;536        if (otp_num > 255UL)
000004  2aff              CMP      r2,#0xff
000006  d901              BLS      |L10.12|
;;;537        {
;;;538            ret = -2;
000008  1e80              SUBS     r0,r0,#2
;;;539        }
;;;540    
;;;541        if (ret == 0)
;;;542        {
;;;543            FMC->ISPCMD = FMC_ISPCMD_READ;
;;;544            FMC->ISPADDR = FMC_OTP_BASE + 0x800UL + otp_num * 4UL;
;;;545            FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
;;;546    
;;;547            while (FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) { }
;;;548    
;;;549            if (FMC->ISPSTS & FMC_ISPSTS_ISPFF_Msk)
;;;550            {
;;;551                FMC->ISPSTS |= FMC_ISPSTS_ISPFF_Msk;
;;;552                ret = -1;
;;;553            }
;;;554            else
;;;555            {
;;;556                if (FMC->ISPDAT != 0xFFFFFFFFUL)
;;;557                {
;;;558                    ret = 1;   /* Lock work was progrmmed. OTP was locked. */
;;;559                }
;;;560            }
;;;561        }
;;;562        return ret;
;;;563    }
00000a  4770              BX       lr
                  |L10.12|
00000c  490d              LDR      r1,|L10.68|
00000e  2300              MOVS     r3,#0                 ;543
000010  60cb              STR      r3,[r1,#0xc]          ;543
000012  4b0d              LDR      r3,|L10.72|
000014  eb030282          ADD      r2,r3,r2,LSL #2       ;544
000018  604a              STR      r2,[r1,#4]            ;544
00001a  2201              MOVS     r2,#1                 ;545
00001c  610a              STR      r2,[r1,#0x10]         ;545
                  |L10.30|
00001e  690a              LDR      r2,[r1,#0x10]         ;547
000020  07d2              LSLS     r2,r2,#31             ;547
000022  d1fc              BNE      |L10.30|
000024  6c0a              LDR      r2,[r1,#0x40]         ;549
000026  0652              LSLS     r2,r2,#25             ;549
000028  d506              BPL      |L10.56|
00002a  6c08              LDR      r0,[r1,#0x40]         ;551
00002c  f0400040          ORR      r0,r0,#0x40           ;551
000030  6408              STR      r0,[r1,#0x40]         ;551
000032  f04f30ff          MOV      r0,#0xffffffff        ;552
                  |L10.54|
000036  4770              BX       lr
                  |L10.56|
000038  6889              LDR      r1,[r1,#8]            ;556
00003a  1c49              ADDS     r1,r1,#1              ;556
00003c  d0fb              BEQ      |L10.54|
00003e  2001              MOVS     r0,#1                 ;558
000040  4770              BX       lr
;;;564    
                          ENDP

000042  0000              DCW      0x0000
                  |L10.68|
                          DCD      0x4000c000
                  |L10.72|
                          DCD      0x00310800

                          AREA ||i.FMC_Lock_OTP||, CODE, READONLY, ALIGN=2

                  FMC_Lock_OTP PROC
;;;496      */
;;;497    int32_t FMC_Lock_OTP(uint32_t otp_num)
000000  4602              MOV      r2,r0
;;;498    {
;;;499        int32_t  ret = 0;
000002  2000              MOVS     r0,#0
;;;500    
;;;501        if (otp_num > 255UL)
000004  2aff              CMP      r2,#0xff
000006  d901              BLS      |L11.12|
;;;502        {
;;;503            ret = -2;
000008  1e80              SUBS     r0,r0,#2
                  |L11.10|
;;;504        }
;;;505    
;;;506        if (ret == 0)
;;;507        {
;;;508            FMC->ISPCMD = FMC_ISPCMD_PROGRAM;
;;;509            FMC->ISPADDR = FMC_OTP_BASE + 0x800UL + otp_num * 4UL;
;;;510            FMC->ISPDAT = 0UL;
;;;511            FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
;;;512    
;;;513            while (FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) { }
;;;514    
;;;515            if (FMC->ISPSTS & FMC_ISPSTS_ISPFF_Msk)
;;;516            {
;;;517                FMC->ISPSTS |= FMC_ISPSTS_ISPFF_Msk;
;;;518                ret = -1;
;;;519            }
;;;520        }
;;;521        return ret;
;;;522    }
00000a  4770              BX       lr
                  |L11.12|
00000c  490b              LDR      r1,|L11.60|
00000e  2321              MOVS     r3,#0x21              ;508
000010  60cb              STR      r3,[r1,#0xc]          ;508
000012  4b0b              LDR      r3,|L11.64|
000014  eb030282          ADD      r2,r3,r2,LSL #2       ;509
000018  604a              STR      r2,[r1,#4]            ;509
00001a  2200              MOVS     r2,#0                 ;510
00001c  608a              STR      r2,[r1,#8]            ;510
00001e  2201              MOVS     r2,#1                 ;511
000020  610a              STR      r2,[r1,#0x10]         ;511
                  |L11.34|
000022  690a              LDR      r2,[r1,#0x10]         ;513
000024  07d2              LSLS     r2,r2,#31             ;513
000026  d1fc              BNE      |L11.34|
000028  6c0a              LDR      r2,[r1,#0x40]         ;515
00002a  0652              LSLS     r2,r2,#25             ;515
00002c  d5ed              BPL      |L11.10|
00002e  6c08              LDR      r0,[r1,#0x40]         ;517
000030  f0400040          ORR      r0,r0,#0x40           ;517
000034  6408              STR      r0,[r1,#0x40]         ;517
000036  f04f30ff          MOV      r0,#0xffffffff        ;518
00003a  4770              BX       lr
;;;523    
                          ENDP

                  |L11.60|
                          DCD      0x4000c000
                  |L11.64|
                          DCD      0x00310800

                          AREA ||i.FMC_Open||, CODE, READONLY, ALIGN=2

                  FMC_Open PROC
;;;171      */
;;;172    void FMC_Open(void)
000000  4802              LDR      r0,|L12.12|
;;;173    {
;;;174        FMC->ISPCTL |=  FMC_ISPCTL_ISPEN_Msk;
000002  6801              LDR      r1,[r0,#0]
000004  f0410101          ORR      r1,r1,#1
000008  6001              STR      r1,[r0,#0]
;;;175    }
00000a  4770              BX       lr
;;;176    
                          ENDP

                  |L12.12|
                          DCD      0x4000c000

                          AREA ||i.FMC_Read||, CODE, READONLY, ALIGN=2

                  FMC_Read PROC
;;;183      */
;;;184    uint32_t FMC_Read(uint32_t u32Addr)
000000  4905              LDR      r1,|L13.24|
;;;185    {
;;;186        FMC->ISPCMD = FMC_ISPCMD_READ;
000002  2200              MOVS     r2,#0
000004  60ca              STR      r2,[r1,#0xc]
;;;187        FMC->ISPADDR = u32Addr;
000006  6048              STR      r0,[r1,#4]
;;;188        FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
000008  2001              MOVS     r0,#1
00000a  6108              STR      r0,[r1,#0x10]
                  |L13.12|
;;;189        while (FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) { }
00000c  6908              LDR      r0,[r1,#0x10]
00000e  07c0              LSLS     r0,r0,#31
000010  d1fc              BNE      |L13.12|
;;;190    
;;;191        return FMC->ISPDAT;
000012  6888              LDR      r0,[r1,#8]
;;;192    }
000014  4770              BX       lr
;;;193    
                          ENDP

000016  0000              DCW      0x0000
                  |L13.24|
                          DCD      0x4000c000

                          AREA ||i.FMC_ReadConfig||, CODE, READONLY, ALIGN=2

                  FMC_ReadConfig PROC
;;;573      */
;;;574    int32_t FMC_ReadConfig(uint32_t u32Config[], uint32_t u32Count)
000000  b530              PUSH     {r4,r5,lr}
;;;575    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;576        int32_t   ret = 0;
000006  2300              MOVS     r3,#0
;;;577    
;;;578        u32Config[0] = FMC_Read(FMC_CONFIG_BASE);
000008  f44f1040          MOV      r0,#0x300000
00000c  f7fffffe          BL       FMC_Read
;;;579    
;;;580        if (u32Count < 2UL)
000010  6020              STR      r0,[r4,#0]
000012  2d02              CMP      r5,#2
000014  d202              BCS      |L14.28|
;;;581        {
;;;582            ret = -1;
000016  f04f33ff          MOV      r3,#0xffffffff
00001a  e003              B        |L14.36|
                  |L14.28|
;;;583        }
;;;584        else
;;;585        {
;;;586            u32Config[1] = FMC_Read(FMC_CONFIG_BASE+4UL);
00001c  4802              LDR      r0,|L14.40|
00001e  f7fffffe          BL       FMC_Read
000022  6060              STR      r0,[r4,#4]
                  |L14.36|
;;;587        }
;;;588        return ret;
000024  4618              MOV      r0,r3
;;;589    }
000026  bd30              POP      {r4,r5,pc}
;;;590    
                          ENDP

                  |L14.40|
                          DCD      0x00300004

                          AREA ||i.FMC_ReadDataFlashBaseAddr||, CODE, READONLY, ALIGN=2

                  FMC_ReadDataFlashBaseAddr PROC
;;;232      */
;;;233    uint32_t FMC_ReadDataFlashBaseAddr(void)
000000  4801              LDR      r0,|L15.8|
;;;234    {
;;;235        return FMC->DFBA;
000002  6940              LDR      r0,[r0,#0x14]
;;;236    }
000004  4770              BX       lr
;;;237    
                          ENDP

000006  0000              DCW      0x0000
                  |L15.8|
                          DCD      0x4000c000

                          AREA ||i.FMC_Read_64||, CODE, READONLY, ALIGN=2

                  FMC_Read_64 PROC
;;;203      */
;;;204    int32_t FMC_Read_64(uint32_t u32addr, uint32_t * u32data0, uint32_t * u32data1)
000000  b530              PUSH     {r4,r5,lr}
;;;205    {
000002  4604              MOV      r4,r0
;;;206        int32_t  ret = 0;
;;;207    
;;;208        FMC->ISPCMD = FMC_ISPCMD_READ_64;
000004  4b0d              LDR      r3,|L16.60|
000006  2000              MOVS     r0,#0                 ;206
000008  2540              MOVS     r5,#0x40
00000a  60dd              STR      r5,[r3,#0xc]
;;;209        FMC->ISPADDR    = u32addr;
00000c  605c              STR      r4,[r3,#4]
;;;210        FMC->ISPDAT = 0x0UL;
00000e  6098              STR      r0,[r3,#8]
;;;211        FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
000010  2401              MOVS     r4,#1
000012  611c              STR      r4,[r3,#0x10]
                  |L16.20|
;;;212    
;;;213        while (FMC->ISPSTS & FMC_ISPSTS_ISPBUSY_Msk) { }
000014  6c1c              LDR      r4,[r3,#0x40]
000016  07e4              LSLS     r4,r4,#31
000018  d1fc              BNE      |L16.20|
;;;214    
;;;215        if (FMC->ISPSTS & FMC_ISPSTS_ISPFF_Msk)
00001a  6c1c              LDR      r4,[r3,#0x40]
00001c  0664              LSLS     r4,r4,#25
00001e  d506              BPL      |L16.46|
;;;216        {
;;;217            FMC->ISPSTS |= FMC_ISPSTS_ISPFF_Msk;
000020  6c18              LDR      r0,[r3,#0x40]
000022  f0400040          ORR      r0,r0,#0x40
000026  6418              STR      r0,[r3,#0x40]
;;;218            ret = -1;
000028  f04f30ff          MOV      r0,#0xffffffff
;;;219        }
;;;220        else
;;;221        {
;;;222            *u32data0 = FMC->MPDAT0;
;;;223            *u32data1 = FMC->MPDAT1;
;;;224        }
;;;225        return ret;
;;;226    }
00002c  bd30              POP      {r4,r5,pc}
                  |L16.46|
00002e  f8534f80          LDR      r4,[r3,#0x80]!        ;222
000032  600c              STR      r4,[r1,#0]            ;223
000034  6859              LDR      r1,[r3,#4]            ;223
000036  6011              STR      r1,[r2,#0]            ;223
000038  bd30              POP      {r4,r5,pc}
;;;227    
                          ENDP

00003a  0000              DCW      0x0000
                  |L16.60|
                          DCD      0x4000c000

                          AREA ||i.FMC_Read_OTP||, CODE, READONLY, ALIGN=2

                  FMC_Read_OTP PROC
;;;457      */
;;;458    int32_t FMC_Read_OTP(uint32_t otp_num, uint32_t *low_word, uint32_t *high_word)
000000  b530              PUSH     {r4,r5,lr}
;;;459    {
000002  4604              MOV      r4,r0
;;;460        int32_t  ret = 0;
000004  2000              MOVS     r0,#0
;;;461    
;;;462        if (otp_num > 255UL)
000006  2cff              CMP      r4,#0xff
000008  d901              BLS      |L17.14|
;;;463        {
;;;464            ret = -2;
00000a  1e80              SUBS     r0,r0,#2
;;;465        }
;;;466    
;;;467        if (ret == 0)
;;;468        {
;;;469            FMC->ISPCMD = FMC_ISPCMD_READ_64;
;;;470            FMC->ISPADDR    = FMC_OTP_BASE + otp_num * 8UL ;
;;;471            FMC->ISPDAT = 0x0UL;
;;;472            FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
;;;473    
;;;474            while (FMC->ISPSTS & FMC_ISPSTS_ISPBUSY_Msk) { }
;;;475    
;;;476            if (FMC->ISPSTS & FMC_ISPSTS_ISPFF_Msk)
;;;477            {
;;;478                FMC->ISPSTS |= FMC_ISPSTS_ISPFF_Msk;
;;;479                ret = -1;
;;;480            }
;;;481            else
;;;482            {
;;;483                *low_word = FMC->MPDAT0;
;;;484                *high_word = FMC->MPDAT1;
;;;485            }
;;;486        }
;;;487        return ret;
;;;488    }
00000c  bd30              POP      {r4,r5,pc}
                  |L17.14|
00000e  4b0f              LDR      r3,|L17.76|
000010  2540              MOVS     r5,#0x40              ;469
000012  60dd              STR      r5,[r3,#0xc]          ;469
000014  f44f1544          MOV      r5,#0x310000          ;470
000018  eb0504c4          ADD      r4,r5,r4,LSL #3       ;470
00001c  605c              STR      r4,[r3,#4]            ;470
00001e  2400              MOVS     r4,#0                 ;471
000020  609c              STR      r4,[r3,#8]            ;471
000022  2401              MOVS     r4,#1                 ;472
000024  611c              STR      r4,[r3,#0x10]         ;472
                  |L17.38|
000026  6c1c              LDR      r4,[r3,#0x40]         ;474
000028  07e4              LSLS     r4,r4,#31             ;474
00002a  d1fc              BNE      |L17.38|
00002c  6c1c              LDR      r4,[r3,#0x40]         ;476
00002e  0664              LSLS     r4,r4,#25             ;476
000030  d506              BPL      |L17.64|
000032  6c18              LDR      r0,[r3,#0x40]         ;478
000034  f0400040          ORR      r0,r0,#0x40           ;478
000038  6418              STR      r0,[r3,#0x40]         ;478
00003a  f04f30ff          MOV      r0,#0xffffffff        ;479
00003e  bd30              POP      {r4,r5,pc}
                  |L17.64|
000040  f8534f80          LDR      r4,[r3,#0x80]!        ;483
000044  600c              STR      r4,[r1,#0]            ;484
000046  6859              LDR      r1,[r3,#4]            ;484
000048  6011              STR      r1,[r2,#0]            ;484
00004a  bd30              POP      {r4,r5,pc}
;;;489    
                          ENDP

                  |L17.76|
                          DCD      0x4000c000

                          AREA ||i.FMC_SetBootSource||, CODE, READONLY, ALIGN=2

                  FMC_SetBootSource PROC
;;;247      */
;;;248    void FMC_SetBootSource(int32_t i32BootSrc)
000000  4905              LDR      r1,|L18.24|
;;;249    {
;;;250        if(i32BootSrc)
000002  2800              CMP      r0,#0
;;;251        {
;;;252            FMC->ISPCTL |= FMC_ISPCTL_BS_Msk; /* Boot from LDROM */
;;;253        }
;;;254        else
;;;255        {
;;;256            FMC->ISPCTL &= ~FMC_ISPCTL_BS_Msk;/* Boot from APROM */
000004  6808              LDR      r0,[r1,#0]
000006  d002              BEQ      |L18.14|
000008  f0400002          ORR      r0,r0,#2              ;252
00000c  e001              B        |L18.18|
                  |L18.14|
00000e  f0200002          BIC      r0,r0,#2
                  |L18.18|
000012  6008              STR      r0,[r1,#0]            ;252
;;;257        }
;;;258    }
000014  4770              BX       lr
;;;259    
                          ENDP

000016  0000              DCW      0x0000
                  |L18.24|
                          DCD      0x4000c000

                          AREA ||i.FMC_SetSPKey||, CODE, READONLY, ALIGN=2

                  FMC_SetSPKey PROC
;;;710      */
;;;711    int32_t  FMC_SetSPKey(uint32_t key[3], uint32_t kpmax, uint32_t kemax,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;712                          const int32_t lock_CONFIG, const int32_t lock_SPROM)
;;;713    {
;;;714        uint32_t  lock_ctrl = 0UL;
;;;715        uint32_t  u32KeySts;
;;;716        int32_t   ret = 0;
;;;717    
;;;718        if (FMC->KPKEYSTS != 0x200UL)
000004  f8df90e8          LDR      r9,|L19.240|
000008  4607              MOV      r7,r0                 ;713
00000a  2500              MOVS     r5,#0                 ;714
00000c  f8dd8024          LDR      r8,[sp,#0x24]
000010  f8d90060          LDR      r0,[r9,#0x60]
000014  461e              MOV      r6,r3                 ;713
000016  4692              MOV      r10,r2                ;713
000018  468b              MOV      r11,r1                ;713
00001a  462c              MOV      r4,r5                 ;716
00001c  f5b07f00          CMP      r0,#0x200
000020  d000              BEQ      |L19.36|
;;;719        {
;;;720            ret = -1;
000022  1e6c              SUBS     r4,r5,#1
                  |L19.36|
;;;721        }
;;;722    
;;;723        if (FMC_Erase(FMC_KPROM_BASE))
000024  4833              LDR      r0,|L19.244|
000026  f7fffffe          BL       FMC_Erase
00002a  b108              CBZ      r0,|L19.48|
;;;724        {
;;;725            ret = -2;
00002c  f06f0401          MVN      r4,#1
                  |L19.48|
;;;726        }
;;;727    
;;;728        if (FMC_Erase(FMC_KPROM_BASE+0x200UL))
000030  4831              LDR      r0,|L19.248|
000032  f7fffffe          BL       FMC_Erase
000036  b108              CBZ      r0,|L19.60|
;;;729        {
;;;730            ret = -3;
000038  f06f0402          MVN      r4,#2
                  |L19.60|
;;;731        }
;;;732    
;;;733        if (!lock_CONFIG)
00003c  b906              CBNZ     r6,|L19.64|
;;;734        {
;;;735            lock_ctrl |= 0x1UL;
00003e  2501              MOVS     r5,#1
                  |L19.64|
;;;736        }
;;;737    
;;;738        if (!lock_SPROM)
000040  f1b80f00          CMP      r8,#0
000044  d101              BNE      |L19.74|
;;;739        {
;;;740            lock_ctrl |= 0x2UL;
000046  f0450502          ORR      r5,r5,#2
                  |L19.74|
;;;741        }
;;;742    
;;;743        if (ret == 0)
00004a  bb2c              CBNZ     r4,|L19.152|
;;;744        {
;;;745            FMC_Write(FMC_KPROM_BASE, key[0]);
00004c  4829              LDR      r0,|L19.244|
00004e  6839              LDR      r1,[r7,#0]
000050  f7fffffe          BL       FMC_Write
;;;746            FMC_Write(FMC_KPROM_BASE+0x4UL, key[1]);
000054  4827              LDR      r0,|L19.244|
000056  6879              LDR      r1,[r7,#4]
000058  1d00              ADDS     r0,r0,#4
00005a  f7fffffe          BL       FMC_Write
;;;747            FMC_Write(FMC_KPROM_BASE+0x8UL, key[2]);
00005e  4825              LDR      r0,|L19.244|
000060  68b9              LDR      r1,[r7,#8]
000062  3008              ADDS     r0,r0,#8
000064  f7fffffe          BL       FMC_Write
;;;748            FMC_Write(FMC_KPROM_BASE+0xCUL, kpmax);
000068  4822              LDR      r0,|L19.244|
00006a  4659              MOV      r1,r11
00006c  300c              ADDS     r0,r0,#0xc
00006e  f7fffffe          BL       FMC_Write
;;;749            FMC_Write(FMC_KPROM_BASE+0x10UL, kemax);
000072  4820              LDR      r0,|L19.244|
000074  4651              MOV      r1,r10
000076  3010              ADDS     r0,r0,#0x10
000078  f7fffffe          BL       FMC_Write
;;;750            FMC_Write(FMC_KPROM_BASE+0x14UL, lock_ctrl);
00007c  481d              LDR      r0,|L19.244|
00007e  4629              MOV      r1,r5
000080  3014              ADDS     r0,r0,#0x14
000082  f7fffffe          BL       FMC_Write
000086  4649              MOV      r1,r9                 ;718
                  |L19.136|
;;;751    
;;;752            while (FMC->KPKEYSTS & FMC_KPKEYSTS_KEYBUSY_Msk) { }
000088  6e08              LDR      r0,[r1,#0x60]
00008a  07c0              LSLS     r0,r0,#31
00008c  d1fc              BNE      |L19.136|
;;;753    
;;;754            u32KeySts = FMC->KPKEYSTS;
00008e  6e08              LDR      r0,[r1,#0x60]
;;;755    
;;;756            if (!(u32KeySts & FMC_KPKEYSTS_KEYLOCK_Msk))
000090  0782              LSLS     r2,r0,#30
000092  d402              BMI      |L19.154|
;;;757            {
;;;758                /* Security key lock failed! */
;;;759                ret = -4;
000094  f06f0403          MVN      r4,#3
                  |L19.152|
000098  e026              B        |L19.232|
                  |L19.154|
;;;760            }
;;;761            else if ((lock_CONFIG && (!(u32KeySts & FMC_KPKEYSTS_CFGFLAG_Msk))) ||
;;;762                     ((!lock_CONFIG) && (u32KeySts & FMC_KPKEYSTS_CFGFLAG_Msk)))
00009a  ea4f6280          LSL      r2,r0,#26
00009e  b116              CBZ      r6,|L19.166|
0000a0  2a00              CMP      r2,#0                 ;761
0000a2  da02              BGE      |L19.170|
0000a4  e004              B        |L19.176|
                  |L19.166|
0000a6  2a00              CMP      r2,#0
0000a8  da02              BGE      |L19.176|
                  |L19.170|
;;;763            {
;;;764                /* CONFIG lock failed! */
;;;765                ret = -5;
0000aa  f06f0404          MVN      r4,#4
0000ae  e01b              B        |L19.232|
                  |L19.176|
;;;766            }
;;;767            else if ((lock_SPROM && (!(u32KeySts & FMC_KPKEYSTS_SPFLAG_Msk))) ||
0000b0  f1b80f00          CMP      r8,#0
;;;768                     ((!lock_SPROM) && (u32KeySts & FMC_KPKEYSTS_SPFLAG_Msk)))
0000b4  ea4f6040          LSL      r0,r0,#25
0000b8  d002              BEQ      |L19.192|
0000ba  2800              CMP      r0,#0                 ;767
0000bc  da02              BGE      |L19.196|
0000be  e004              B        |L19.202|
                  |L19.192|
0000c0  2800              CMP      r0,#0
0000c2  da02              BGE      |L19.202|
                  |L19.196|
;;;769            {
;;;770                /* CONFIG lock failed! */
;;;771                ret = -6;
0000c4  f06f0405          MVN      r4,#5
0000c8  e00e              B        |L19.232|
                  |L19.202|
;;;772            }
;;;773            else if (((FMC->KPCNT & FMC_KPCNT_KPMAX_Msk) >> FMC_KPCNT_KPMAX_Pos) != kpmax)
0000ca  6e88              LDR      r0,[r1,#0x68]
0000cc  f3c02203          UBFX     r2,r0,#8,#4
0000d0  455a              CMP      r2,r11
0000d2  d002              BEQ      |L19.218|
;;;774            {
;;;775                /* KPMAX failed! */
;;;776                ret = -7;
0000d4  f06f0406          MVN      r4,#6
0000d8  e006              B        |L19.232|
                  |L19.218|
;;;777            }
;;;778            else if (((FMC->KPKEYCNT & FMC_KPKEYCNT_KPKEMAX_Msk) >> FMC_KPKEYCNT_KPKEMAX_Pos) != kemax)
0000da  6e48              LDR      r0,[r1,#0x64]
0000dc  f3c02105          UBFX     r1,r0,#8,#6
0000e0  4551              CMP      r1,r10
0000e2  d001              BEQ      |L19.232|
;;;779            {
;;;780                /* KEMAX failed! */
;;;781                ret = -8;
0000e4  f06f0407          MVN      r4,#7
                  |L19.232|
;;;782            }
;;;783        }
;;;784        return ret;
0000e8  4620              MOV      r0,r4
;;;785    }
0000ea  e8bd8ff0          POP      {r4-r11,pc}
;;;786    
                          ENDP

0000ee  0000              DCW      0x0000
                  |L19.240|
                          DCD      0x4000c000
                  |L19.244|
                          DCD      0x00301000
                  |L19.248|
                          DCD      0x00301200

                          AREA ||i.FMC_Write||, CODE, READONLY, ALIGN=2

                  FMC_Write PROC
;;;266      */
;;;267    void FMC_Write(uint32_t u32Addr, uint32_t u32Data)
000000  4a05              LDR      r2,|L20.24|
;;;268    {
;;;269        FMC->ISPCMD = FMC_ISPCMD_PROGRAM;
000002  2321              MOVS     r3,#0x21
000004  60d3              STR      r3,[r2,#0xc]
;;;270        FMC->ISPADDR = u32Addr;
000006  6050              STR      r0,[r2,#4]
;;;271        FMC->ISPDAT = u32Data;
000008  6091              STR      r1,[r2,#8]
;;;272        FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
00000a  2001              MOVS     r0,#1
00000c  6110              STR      r0,[r2,#0x10]
                  |L20.14|
;;;273        while (FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) { }
00000e  6910              LDR      r0,[r2,#0x10]
000010  07c0              LSLS     r0,r0,#31
000012  d1fc              BNE      |L20.14|
;;;274    }
000014  4770              BX       lr
;;;275    
                          ENDP

000016  0000              DCW      0x0000
                  |L20.24|
                          DCD      0x4000c000

                          AREA ||i.FMC_Write8Bytes||, CODE, READONLY, ALIGN=2

                  FMC_Write8Bytes PROC
;;;284      */
;;;285    int32_t FMC_Write8Bytes(uint32_t u32addr, uint32_t u32data0, uint32_t u32data1)
000000  b530              PUSH     {r4,r5,lr}
;;;286    {
000002  4604              MOV      r4,r0
;;;287        int32_t  ret = 0;
;;;288    
;;;289        FMC->ISPCMD  = FMC_ISPCMD_PROGRAM_64;
000004  4b0b              LDR      r3,|L21.52|
000006  2000              MOVS     r0,#0                 ;287
000008  2561              MOVS     r5,#0x61
00000a  60dd              STR      r5,[r3,#0xc]
;;;290        FMC->ISPADDR = u32addr;
00000c  605c              STR      r4,[r3,#4]
;;;291        FMC->MPDAT0  = u32data0;
00000e  f8c31080          STR      r1,[r3,#0x80]
;;;292        FMC->MPDAT1  = u32data1;
000012  f8c32084          STR      r2,[r3,#0x84]
;;;293        FMC->ISPTRG  = FMC_ISPTRG_ISPGO_Msk;
000016  2101              MOVS     r1,#1
000018  6119              STR      r1,[r3,#0x10]
                  |L21.26|
;;;294    
;;;295        while (FMC->ISPSTS & FMC_ISPSTS_ISPBUSY_Msk) { }
00001a  6c19              LDR      r1,[r3,#0x40]
00001c  07c9              LSLS     r1,r1,#31
00001e  d1fc              BNE      |L21.26|
;;;296    
;;;297        if (FMC->ISPSTS & FMC_ISPSTS_ISPFF_Msk)
000020  6c19              LDR      r1,[r3,#0x40]
000022  0649              LSLS     r1,r1,#25
000024  d505              BPL      |L21.50|
;;;298        {
;;;299            FMC->ISPSTS |= FMC_ISPSTS_ISPFF_Msk;
000026  6c18              LDR      r0,[r3,#0x40]
000028  f0400040          ORR      r0,r0,#0x40
00002c  6418              STR      r0,[r3,#0x40]
;;;300            ret = -1;
00002e  f04f30ff          MOV      r0,#0xffffffff
                  |L21.50|
;;;301        }
;;;302        return ret;
;;;303    }
000032  bd30              POP      {r4,r5,pc}
;;;304    
                          ENDP

                  |L21.52|
                          DCD      0x4000c000

                          AREA ||i.FMC_WriteConfig||, CODE, READONLY, ALIGN=2

                  FMC_WriteConfig PROC
;;;600      */
;;;601    int32_t FMC_WriteConfig(uint32_t u32Config[], uint32_t u32Count)
000000  b570              PUSH     {r4-r6,lr}
;;;602    {
;;;603        FMC_ENABLE_CFG_UPDATE();
000002  4c0c              LDR      r4,|L22.52|
000004  4605              MOV      r5,r0                 ;602
000006  6820              LDR      r0,[r4,#0]
000008  f0400010          ORR      r0,r0,#0x10
00000c  6020              STR      r0,[r4,#0]
;;;604        FMC_Erase(FMC_CONFIG_BASE);
00000e  01a6              LSLS     r6,r4,#6
000010  4630              MOV      r0,r6
000012  f7fffffe          BL       FMC_Erase
;;;605        FMC_Write(FMC_CONFIG_BASE, u32Config[0]);
000016  4630              MOV      r0,r6
000018  6829              LDR      r1,[r5,#0]
00001a  f7fffffe          BL       FMC_Write
;;;606        FMC_Write(FMC_CONFIG_BASE+4UL, u32Config[1]);
00001e  1d30              ADDS     r0,r6,#4
000020  6869              LDR      r1,[r5,#4]
000022  f7fffffe          BL       FMC_Write
;;;607        FMC_DISABLE_CFG_UPDATE();
000026  6820              LDR      r0,[r4,#0]
000028  f0200010          BIC      r0,r0,#0x10
00002c  6020              STR      r0,[r4,#0]
;;;608        return 0;
00002e  2000              MOVS     r0,#0
;;;609    }
000030  bd70              POP      {r4-r6,pc}
;;;610    
                          ENDP

000032  0000              DCW      0x0000
                  |L22.52|
                          DCD      0x4000c000

                          AREA ||i.FMC_WriteMultiple||, CODE, READONLY, ALIGN=2

                  FMC_WriteMultiple PROC
;;;314      */
;;;315    int32_t FMC_WriteMultiple(uint32_t u32Addr, uint32_t pu32Buf[], uint32_t u32Len)
000000  b5f0              PUSH     {r4-r7,lr}
;;;316    {
000002  4605              MOV      r5,r0
;;;317        int   i, idx, retval = 0;
000004  2000              MOVS     r0,#0
;;;318    
;;;319        if ((u32Addr >= FMC_APROM_END) || ((u32Addr % 8) != 0))
000006  f5b52f00          CMP      r5,#0x80000
00000a  d201              BCS      |L23.16|
00000c  076b              LSLS     r3,r5,#29
00000e  d002              BEQ      |L23.22|
                  |L23.16|
;;;320        {
;;;321            return -1;
000010  f04f30ff          MOV      r0,#0xffffffff
                  |L23.20|
;;;322        }
;;;323    
;;;324        u32Len = u32Len - (u32Len % 8);         /* u32Len must be multiple of 8. */
;;;325    
;;;326        idx = 0;
;;;327    
;;;328        while (u32Len >= 8)
;;;329        {
;;;330            FMC->ISPADDR = u32Addr;
;;;331            FMC->MPDAT0  = pu32Buf[idx++];
;;;332            FMC->MPDAT1  = pu32Buf[idx++];
;;;333            FMC->MPDAT2  = pu32Buf[idx++];
;;;334            FMC->MPDAT3  = pu32Buf[idx++];
;;;335            FMC->ISPCMD  = FMC_ISPCMD_PROGRAM_MUL;
;;;336            FMC->ISPTRG  = FMC_ISPTRG_ISPGO_Msk;
;;;337    
;;;338            for (i = 16; i < FMC_MULTI_WORD_PROG_LEN; )
;;;339            {
;;;340                while (FMC->MPSTS & (FMC_MPSTS_D0_Msk | FMC_MPSTS_D1_Msk))
;;;341                    ;
;;;342                retval += 8;
;;;343                u32Len -= 8;
;;;344                if (u32Len < 8)
;;;345                {
;;;346                    return retval;
;;;347                }
;;;348    
;;;349                if (!(FMC->MPSTS & FMC_MPSTS_MPBUSY_Msk))
;;;350                {
;;;351                    /* printf("    [WARNING] busy cleared after D0D1 cleared!\n"); */
;;;352                    i += 8;
;;;353                    break;
;;;354                }
;;;355    
;;;356                FMC->MPDAT0 = pu32Buf[idx++];
;;;357                FMC->MPDAT1 = pu32Buf[idx++];
;;;358    
;;;359                if (i == FMC_MULTI_WORD_PROG_LEN/4)
;;;360                    break;           // done
;;;361    
;;;362                while (FMC->MPSTS & (FMC_MPSTS_D2_Msk | FMC_MPSTS_D3_Msk))
;;;363                    ;
;;;364                retval += 8;
;;;365                u32Len -= 8;
;;;366                if (u32Len < 8)
;;;367                {
;;;368                    return retval;
;;;369                }
;;;370    
;;;371                if (!(FMC->MPSTS & FMC_MPSTS_MPBUSY_Msk))
;;;372                {
;;;373                    /* printf("    [WARNING] busy cleared after D2D3 cleared!\n"); */
;;;374                    i += 8;
;;;375                    break;
;;;376                }
;;;377    
;;;378                FMC->MPDAT2 = pu32Buf[idx++];
;;;379                FMC->MPDAT3 = pu32Buf[idx++];
;;;380            }
;;;381    
;;;382            if (i != FMC_MULTI_WORD_PROG_LEN)
;;;383            {
;;;384                /* printf("    [WARNING] Multi-word program interrupted at 0x%x !!\n", i); */
;;;385                return retval;
;;;386            }
;;;387    
;;;388            while (FMC->MPSTS & FMC_MPSTS_MPBUSY_Msk) ;
;;;389    
;;;390            u32Addr += FMC_MULTI_WORD_PROG_LEN;
;;;391        }
;;;392        return retval;
;;;393    }
000014  bdf0              POP      {r4-r7,pc}
                  |L23.22|
000016  f0020307          AND      r3,r2,#7              ;324
00001a  1ad3              SUBS     r3,r2,r3              ;324
00001c  2200              MOVS     r2,#0                 ;326
00001e  f44f7c00          MOV      r12,#0x200            ;338
000022  4e2d              LDR      r6,|L23.216|
000024  e053              B        |L23.206|
                  |L23.38|
000026  6075              STR      r5,[r6,#4]            ;330
000028  f8514022          LDR      r4,[r1,r2,LSL #2]     ;331
00002c  f8c64080          STR      r4,[r6,#0x80]         ;331
000030  1c52              ADDS     r2,r2,#1              ;331
000032  f8514022          LDR      r4,[r1,r2,LSL #2]     ;332
000036  f8c64084          STR      r4,[r6,#0x84]         ;332
00003a  1c52              ADDS     r2,r2,#1              ;332
00003c  f8514022          LDR      r4,[r1,r2,LSL #2]     ;333
000040  f8c64088          STR      r4,[r6,#0x88]         ;333
000044  1c52              ADDS     r2,r2,#1              ;333
000046  f8514022          LDR      r4,[r1,r2,LSL #2]     ;334
00004a  f8c6408c          STR      r4,[r6,#0x8c]         ;334
00004e  2427              MOVS     r4,#0x27              ;335
000050  60f4              STR      r4,[r6,#0xc]          ;335
000052  2401              MOVS     r4,#1                 ;336
000054  6134              STR      r4,[r6,#0x10]         ;336
000056  2410              MOVS     r4,#0x10              ;338
000058  1c52              ADDS     r2,r2,#1              ;338
                  |L23.90|
00005a  f8d670c0          LDR      r7,[r6,#0xc0]         ;340
00005e  f0170f30          TST      r7,#0x30              ;340
000062  d1fa              BNE      |L23.90|
000064  3008              ADDS     r0,r0,#8              ;340
000066  3b08              SUBS     r3,r3,#8              ;340
000068  2b08              CMP      r3,#8                 ;344
00006a  d3d3              BCC      |L23.20|
00006c  f8d670c0          LDR      r7,[r6,#0xc0]         ;349
000070  07ff              LSLS     r7,r7,#31             ;349
000072  d02f              BEQ      |L23.212|
000074  f8517022          LDR      r7,[r1,r2,LSL #2]     ;356
000078  f8c67080          STR      r7,[r6,#0x80]         ;356
00007c  1c52              ADDS     r2,r2,#1              ;356
00007e  f8517022          LDR      r7,[r1,r2,LSL #2]     ;357
000082  f8c67084          STR      r7,[r6,#0x84]         ;357
000086  1c52              ADDS     r2,r2,#1              ;357
000088  2c80              CMP      r4,#0x80              ;359
00008a  d0c3              BEQ      |L23.20|
                  |L23.140|
00008c  f8d670c0          LDR      r7,[r6,#0xc0]         ;362
000090  f0170fc0          TST      r7,#0xc0              ;362
000094  d1fa              BNE      |L23.140|
000096  3008              ADDS     r0,r0,#8              ;362
000098  3b08              SUBS     r3,r3,#8              ;362
00009a  2b08              CMP      r3,#8                 ;366
00009c  d3ba              BCC      |L23.20|
00009e  f8d670c0          LDR      r7,[r6,#0xc0]         ;371
0000a2  07ff              LSLS     r7,r7,#31             ;371
0000a4  d016              BEQ      |L23.212|
0000a6  f8517022          LDR      r7,[r1,r2,LSL #2]     ;378
0000aa  f8c67088          STR      r7,[r6,#0x88]         ;378
0000ae  1c52              ADDS     r2,r2,#1              ;378
0000b0  f8517022          LDR      r7,[r1,r2,LSL #2]     ;379
0000b4  f8c6708c          STR      r7,[r6,#0x8c]         ;379
0000b8  1c52              ADDS     r2,r2,#1              ;379
0000ba  4564              CMP      r4,r12                ;338
0000bc  dbcd              BLT      |L23.90|
                  |L23.190|
0000be  4564              CMP      r4,r12                ;382
0000c0  d1a8              BNE      |L23.20|
                  |L23.194|
0000c2  f8d640c0          LDR      r4,[r6,#0xc0]         ;388
0000c6  07e4              LSLS     r4,r4,#31             ;388
0000c8  d1fb              BNE      |L23.194|
0000ca  f5057500          ADD      r5,r5,#0x200          ;388
                  |L23.206|
0000ce  2b08              CMP      r3,#8                 ;328
0000d0  d2a9              BCS      |L23.38|
0000d2  bdf0              POP      {r4-r7,pc}
                  |L23.212|
0000d4  3408              ADDS     r4,r4,#8
0000d6  e7f2              B        |L23.190|
;;;394    
                          ENDP

                  |L23.216|
                          DCD      0x4000c000

                          AREA ||i.FMC_Write_OTP||, CODE, READONLY, ALIGN=2

                  FMC_Write_OTP PROC
;;;404      */
;;;405    int32_t FMC_Write_OTP(uint32_t otp_num, uint32_t low_word, uint32_t high_word)
000000  b5f0              PUSH     {r4-r7,lr}
;;;406    {
000002  4604              MOV      r4,r0
;;;407        int32_t  ret = 0;
000004  2000              MOVS     r0,#0
;;;408    
;;;409        if (otp_num > 255UL)
000006  2cff              CMP      r4,#0xff
000008  d901              BLS      |L24.14|
;;;410        {
;;;411            ret = -2;
00000a  1e80              SUBS     r0,r0,#2
                  |L24.12|
;;;412        }
;;;413    
;;;414        if (ret == 0)
;;;415        {
;;;416            FMC->ISPCMD = FMC_ISPCMD_PROGRAM;
;;;417            FMC->ISPADDR = FMC_OTP_BASE + otp_num * 8UL;
;;;418            FMC->ISPDAT = low_word;
;;;419            FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
;;;420    
;;;421            while (FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) { }
;;;422    
;;;423            if (FMC->ISPSTS & FMC_ISPSTS_ISPFF_Msk)
;;;424            {
;;;425                FMC->ISPSTS |= FMC_ISPSTS_ISPFF_Msk;
;;;426                ret = -1;
;;;427            }
;;;428        }
;;;429    
;;;430        if (ret == 0)
;;;431        {
;;;432            FMC->ISPCMD = FMC_ISPCMD_PROGRAM;
;;;433            FMC->ISPADDR = FMC_OTP_BASE + otp_num * 8UL + 4UL;
;;;434            FMC->ISPDAT = high_word;
;;;435            FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
;;;436    
;;;437            while (FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) { }
;;;438    
;;;439            if (FMC->ISPSTS & FMC_ISPSTS_ISPFF_Msk)
;;;440            {
;;;441                FMC->ISPSTS |= FMC_ISPSTS_ISPFF_Msk;
;;;442                ret = -1;
;;;443            }
;;;444        }
;;;445    
;;;446        return ret;
;;;447    }
00000c  bdf0              POP      {r4-r7,pc}
                  |L24.14|
00000e  4b14              LDR      r3,|L24.96|
000010  2621              MOVS     r6,#0x21              ;416
000012  60de              STR      r6,[r3,#0xc]          ;416
000014  f44f1544          MOV      r5,#0x310000          ;417
000018  eb0505c4          ADD      r5,r5,r4,LSL #3       ;417
00001c  605d              STR      r5,[r3,#4]            ;417
00001e  6099              STR      r1,[r3,#8]            ;418
000020  2701              MOVS     r7,#1                 ;419
000022  611f              STR      r7,[r3,#0x10]         ;419
                  |L24.36|
000024  6919              LDR      r1,[r3,#0x10]         ;421
000026  07c9              LSLS     r1,r1,#31             ;421
000028  d1fc              BNE      |L24.36|
00002a  6c19              LDR      r1,[r3,#0x40]         ;423
00002c  f04f35ff          MOV      r5,#0xffffffff        ;426
000030  0649              LSLS     r1,r1,#25             ;423
000032  d40e              BMI      |L24.82|
000034  2800              CMP      r0,#0                 ;430
000036  d1e9              BNE      |L24.12|
000038  60de              STR      r6,[r3,#0xc]          ;432
00003a  490a              LDR      r1,|L24.100|
00003c  eb0101c4          ADD      r1,r1,r4,LSL #3       ;433
000040  6059              STR      r1,[r3,#4]            ;433
000042  609a              STR      r2,[r3,#8]            ;434
000044  611f              STR      r7,[r3,#0x10]         ;435
                  |L24.70|
000046  6919              LDR      r1,[r3,#0x10]         ;437
000048  07c9              LSLS     r1,r1,#31             ;437
00004a  d1fc              BNE      |L24.70|
00004c  6c19              LDR      r1,[r3,#0x40]         ;439
00004e  0649              LSLS     r1,r1,#25             ;439
000050  d5dc              BPL      |L24.12|
                  |L24.82|
000052  6c18              LDR      r0,[r3,#0x40]         ;441
000054  f0400040          ORR      r0,r0,#0x40           ;441
000058  6418              STR      r0,[r3,#0x40]         ;441
00005a  4628              MOV      r0,r5                 ;442
00005c  bdf0              POP      {r4-r7,pc}
;;;448    
                          ENDP

00005e  0000              DCW      0x0000
                  |L24.96|
                          DCD      0x4000c000
                  |L24.100|
                          DCD      0x00310004

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Library\\StdDriver\\src\\fmc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_fmc_c_65c03504____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___5_fmc_c_65c03504____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_fmc_c_65c03504____REVSH|
#line 402
|__asm___5_fmc_c_65c03504____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___5_fmc_c_65c03504____RRX|
#line 587
|__asm___5_fmc_c_65c03504____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\hsusbd.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\hsusbd.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M480\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\hsusbd.crf ..\..\..\Library\StdDriver\src\hsusbd.c]
                          THUMB

                          AREA ||i.HSUSBD_CtrlIn||, CODE, READONLY, ALIGN=2

                  HSUSBD_CtrlIn PROC
;;;605     */
;;;606    void HSUSBD_CtrlIn(void)
000000  b57c              PUSH     {r2-r6,lr}
;;;607    {
;;;608        uint32_t volatile i, cnt;
;;;609        uint8_t u8Value;
;;;610        if(g_hsusbd_CtrlInSize >= g_hsusbd_CtrlMaxPktSize)
000002  4b1d              LDR      r3,|L1.120|
000004  2500              MOVS     r5,#0
;;;611        {
;;;612            /* Data size > MXPLD */
;;;613            cnt = g_hsusbd_CtrlMaxPktSize >> 2;
;;;614            for (i=0ul; i<cnt; i++)
;;;615            {
;;;616                HSUSBD->CEPDAT = *(uint32_t *)g_hsusbd_CtrlInPointer;
000006  4c1d              LDR      r4,|L1.124|
000008  69da              LDR      r2,[r3,#0x1c]         ;610  ; g_hsusbd_CtrlMaxPktSize
00000a  6a59              LDR      r1,[r3,#0x24]         ;610  ; g_hsusbd_CtrlInSize
00000c  4291              CMP      r1,r2                 ;610
00000e  d312              BCC      |L1.54|
000010  0890              LSRS     r0,r2,#2              ;613
000012  e9cd0500          STRD     r0,r5,[sp,#0]         ;613
000016  4628              MOV      r0,r5                 ;614
000018  e006              B        |L1.40|
                  |L1.26|
00001a  6998              LDR      r0,[r3,#0x18]  ; g_hsusbd_CtrlInPointer
00001c  c820              LDM      r0!,{r5}
00001e  62a5              STR      r5,[r4,#0x28]
000020  6198              STR      r0,[r3,#0x18]         ;614  ; g_hsusbd_CtrlInPointer
000022  9801              LDR      r0,[sp,#4]            ;614
000024  1c40              ADDS     r0,r0,#1              ;614
000026  9001              STR      r0,[sp,#4]            ;614
                  |L1.40|
000028  9d00              LDR      r5,[sp,#0]            ;614
00002a  42a8              CMP      r0,r5                 ;614
00002c  d3f5              BCC      |L1.26|
;;;617                g_hsusbd_CtrlInPointer = (uint8_t *)(g_hsusbd_CtrlInPointer + 4ul);
;;;618            }
;;;619            HSUSBD_START_CEP_IN(g_hsusbd_CtrlMaxPktSize);
00002e  63a2              STR      r2,[r4,#0x38]
;;;620            g_hsusbd_CtrlInSize -= g_hsusbd_CtrlMaxPktSize;
000030  1a88              SUBS     r0,r1,r2
000032  6258              STR      r0,[r3,#0x24]  ; g_hsusbd_CtrlInSize
;;;621        }
;;;622        else
;;;623        {
;;;624            /* Data size <= MXPLD */
;;;625            cnt = g_hsusbd_CtrlInSize >> 2;
;;;626            for (i=0ul; i<cnt; i++)
;;;627            {
;;;628                HSUSBD->CEPDAT = *(uint32_t *)g_hsusbd_CtrlInPointer;
;;;629                g_hsusbd_CtrlInPointer += 4ul;
;;;630            }
;;;631    
;;;632            for (i=0ul; i<(g_hsusbd_CtrlInSize % 4ul); i++)
;;;633            {
;;;634                u8Value = *(uint8_t *)(g_hsusbd_CtrlInPointer+i);
;;;635                outpb(&HSUSBD->CEPDAT, u8Value);
;;;636            }
;;;637    
;;;638            HSUSBD_START_CEP_IN(g_hsusbd_CtrlInSize);
;;;639            g_hsusbd_CtrlInPointer = 0;
;;;640            g_hsusbd_CtrlInSize = 0ul;
;;;641        }
;;;642    }
000034  bd7c              POP      {r2-r6,pc}
                  |L1.54|
000036  0888              LSRS     r0,r1,#2              ;625
000038  e9cd0500          STRD     r0,r5,[sp,#0]         ;625
00003c  4628              MOV      r0,r5                 ;626
00003e  e006              B        |L1.78|
                  |L1.64|
000040  6998              LDR      r0,[r3,#0x18]         ;628  ; g_hsusbd_CtrlInPointer
000042  c804              LDM      r0!,{r2}              ;628
000044  62a2              STR      r2,[r4,#0x28]         ;628
000046  6198              STR      r0,[r3,#0x18]         ;626  ; g_hsusbd_CtrlInPointer
000048  9801              LDR      r0,[sp,#4]            ;626
00004a  1c40              ADDS     r0,r0,#1              ;626
00004c  9001              STR      r0,[sp,#4]            ;626
                  |L1.78|
00004e  9a00              LDR      r2,[sp,#0]            ;626
000050  4290              CMP      r0,r2                 ;626
000052  d3f5              BCC      |L1.64|
000054  9501              STR      r5,[sp,#4]            ;616
000056  f0010603          AND      r6,r1,#3              ;632
00005a  4628              MOV      r0,r5                 ;632
00005c  699a              LDR      r2,[r3,#0x18]         ;632
00005e  e005              B        |L1.108|
                  |L1.96|
000060  5c10              LDRB     r0,[r2,r0]            ;634
000062  f8840028          STRB     r0,[r4,#0x28]         ;635
000066  9801              LDR      r0,[sp,#4]            ;632
000068  1c40              ADDS     r0,r0,#1              ;632
00006a  9001              STR      r0,[sp,#4]            ;632
                  |L1.108|
00006c  4286              CMP      r6,r0                 ;632
00006e  d8f7              BHI      |L1.96|
000070  63a1              STR      r1,[r4,#0x38]         ;638
000072  619d              STR      r5,[r3,#0x18]         ;640  ; g_hsusbd_CtrlInPointer
000074  625d              STR      r5,[r3,#0x24]         ;640  ; g_hsusbd_CtrlInSize
000076  bd7c              POP      {r2-r6,pc}
;;;643    
                          ENDP

                  |L1.120|
                          DCD      ||.data||
                  |L1.124|
                          DCD      0x40019000

                          AREA ||i.HSUSBD_CtrlOut||, CODE, READONLY, ALIGN=2

                  HSUSBD_CtrlOut PROC
;;;653     */
;;;654    void HSUSBD_CtrlOut(uint8_t pu8Buf[], uint32_t u32Size)
000000  b518              PUSH     {r3,r4,lr}
;;;655    {
;;;656        uint32_t volatile i;
;;;657        while(1)
;;;658        {
;;;659            if ((HSUSBD->CEPINTSTS & HSUSBD_CEPINTSTS_RXPKIF_Msk) == HSUSBD_CEPINTSTS_RXPKIF_Msk)
000002  4a09              LDR      r2,|L2.40|
                  |L2.4|
000004  6b53              LDR      r3,[r2,#0x34]
000006  065b              LSLS     r3,r3,#25
000008  d5fc              BPL      |L2.4|
;;;660            {
;;;661                for (i=0ul; i<u32Size; i++)
00000a  2300              MOVS     r3,#0
00000c  e005              B        |L2.26|
                  |L2.14|
;;;662                {
;;;663                    pu8Buf[i] = inpb(&HSUSBD->CEPDAT);
00000e  f8923028          LDRB     r3,[r2,#0x28]
000012  9c00              LDR      r4,[sp,#0]
000014  5503              STRB     r3,[r0,r4]
000016  9b00              LDR      r3,[sp,#0]            ;661
000018  1c5b              ADDS     r3,r3,#1              ;661
                  |L2.26|
00001a  9300              STR      r3,[sp,#0]            ;661
00001c  428b              CMP      r3,r1                 ;661
00001e  d3f6              BCC      |L2.14|
;;;664                }
;;;665                HSUSBD->CEPINTSTS = HSUSBD_CEPINTSTS_RXPKIF_Msk;
000020  2040              MOVS     r0,#0x40
000022  6350              STR      r0,[r2,#0x34]
;;;666                break;
;;;667            }
;;;668        }
;;;669    }
000024  bd18              POP      {r3,r4,pc}
;;;670    
                          ENDP

000026  0000              DCW      0x0000
                  |L2.40|
                          DCD      0x40019000

                          AREA ||i.HSUSBD_GetDescriptor||, CODE, READONLY, ALIGN=2

                  HSUSBD_GetDescriptor PROC
;;;165     */
;;;166    int HSUSBD_GetDescriptor(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;167    {
;;;168        uint32_t u32Len;
;;;169        int val = 0;
;;;170    
;;;171        u32Len = gUsbCmd.wLength;
000002  4849              LDR      r0,|L3.296|
000004  2400              MOVS     r4,#0                 ;169
;;;172        g_hsusbd_CtrlZero = (uint8_t)0ul;
000006  f1a0052c          SUB      r5,r0,#0x2c
00000a  88c1              LDRH     r1,[r0,#6]            ;171  ; gUsbCmd
00000c  716c              STRB     r4,[r5,#5]
;;;173    
;;;174        switch ((gUsbCmd.wValue & 0xff00ul) >> 8)
00000e  f8b0e002          LDRH     lr,[r0,#2]  ; gUsbCmd
000012  462a              MOV      r2,r5                 ;172
000014  ea4f231e          LSR      r3,lr,#8
;;;175        {
;;;176        /* Get Device Descriptor */
;;;177        case DESC_DEVICE:
;;;178        {
;;;179            u32Len = Minimum(u32Len, LEN_DEVICE);
;;;180            HSUSBD_PrepareCtrlIn((uint8_t *)g_hsusbd_sInfo->gu8DevDesc, u32Len);
000018  69d0              LDR      r0,[r2,#0x1c]
;;;181            break;
;;;182        }
;;;183        /* Get Configuration Descriptor */
;;;184        case DESC_CONFIG:
;;;185        {
;;;186            uint32_t u32TotalLen;
;;;187            if ((HSUSBD->OPER & 0x04ul) == 0x04ul)
00001a  4f44              LDR      r7,|L3.300|
;;;188            {
;;;189                u32TotalLen = g_hsusbd_sInfo->gu8ConfigDesc[3];
;;;190                u32TotalLen = g_hsusbd_sInfo->gu8ConfigDesc[2] + (u32TotalLen << 8);
;;;191    
;;;192                u32Len = Minimum(u32Len, u32TotalLen);
;;;193                if ((u32Len % g_hsusbd_CtrlMaxPktSize) == 0ul)
;;;194                {
;;;195                    g_hsusbd_CtrlZero = (uint8_t)1ul;
00001c  2601              MOVS     r6,#1
00001e  6a92              LDR      r2,[r2,#0x28]         ;180
;;;196                }
;;;197                HSUSBD_PrepareCtrlIn((uint8_t *)g_hsusbd_sInfo->gu8ConfigDesc, u32Len);
;;;198            }
;;;199            else
;;;200            {
;;;201                u32TotalLen = g_hsusbd_sInfo->gu8FullConfigDesc[3];
;;;202                u32TotalLen = g_hsusbd_sInfo->gu8FullConfigDesc[2] + (u32TotalLen << 8);
;;;203    
;;;204                u32Len = Minimum(u32Len, u32TotalLen);
;;;205                if ((u32Len % g_hsusbd_CtrlMaxPktSize) == 0ul)
;;;206                {
;;;207                    g_hsusbd_CtrlZero = (uint8_t)1ul;
;;;208                }
;;;209    
;;;210                HSUSBD_PrepareCtrlIn((uint8_t *)g_hsusbd_sInfo->gu8FullConfigDesc, u32Len);
;;;211            }
;;;212    
;;;213            break;
;;;214        }
;;;215        /* Get Qualifier Descriptor */
;;;216        case DESC_QUALIFIER:
;;;217        {
;;;218            u32Len = Minimum(u32Len, LEN_QUALIFIER);
;;;219            HSUSBD_PrepareCtrlIn((uint8_t *)g_hsusbd_sInfo->gu8QualDesc, u32Len);
;;;220            break;
;;;221        }
;;;222        /* Get Other Speed Descriptor - Full speed */
;;;223        case DESC_OTHERSPEED:
;;;224        {
;;;225            uint32_t u32TotalLen;
;;;226            if ((HSUSBD->OPER & 0x04ul) == 0x04ul)
;;;227            {
;;;228                u32TotalLen = g_hsusbd_sInfo->gu8HSOtherConfigDesc[3];
;;;229                u32TotalLen = g_hsusbd_sInfo->gu8HSOtherConfigDesc[2] + (u32TotalLen << 8);
;;;230    
;;;231                u32Len = Minimum(u32Len, u32TotalLen);
;;;232                if ((u32Len % g_hsusbd_CtrlMaxPktSize) == 0ul)
;;;233                {
;;;234                    g_hsusbd_CtrlZero = (uint8_t)1ul;
;;;235                }
;;;236    
;;;237                HSUSBD_PrepareCtrlIn((uint8_t *)g_hsusbd_sInfo->gu8HSOtherConfigDesc, u32Len);
;;;238            }
;;;239            else
;;;240            {
;;;241                u32TotalLen = g_hsusbd_sInfo->gu8FSOtherConfigDesc[3];
;;;242                u32TotalLen = g_hsusbd_sInfo->gu8FSOtherConfigDesc[2] + (u32TotalLen << 8);
;;;243    
;;;244                u32Len = Minimum(u32Len, u32TotalLen);
;;;245                if ((u32Len % g_hsusbd_CtrlMaxPktSize) == 0ul)
;;;246                {
;;;247                    g_hsusbd_CtrlZero = (uint8_t)1ul;
;;;248                }
;;;249    
;;;250                HSUSBD_PrepareCtrlIn((uint8_t *)g_hsusbd_sInfo->gu8FSOtherConfigDesc, u32Len);
;;;251            }
;;;252    
;;;253            break;
;;;254        }
;;;255        /* Get HID Descriptor */
;;;256        case DESC_HID:
;;;257        {
;;;258            u32Len = Minimum(u32Len, LEN_HID);
;;;259            HSUSBD_MemCopy(g_hsusbd_buf, &g_hsusbd_sInfo->gu8ConfigDesc[LEN_CONFIG+LEN_INTERFACE], u32Len);
;;;260            HSUSBD_PrepareCtrlIn(g_hsusbd_buf, u32Len);
;;;261            break;
;;;262        }
;;;263        /* Get Report Descriptor */
;;;264        case DESC_HID_RPT:
;;;265        {
;;;266            if ((u32Len % g_hsusbd_CtrlMaxPktSize) == 0ul)
;;;267            {
;;;268                g_hsusbd_CtrlZero = (uint8_t)1ul;
;;;269            }
;;;270    
;;;271            if ((HSUSBD->OPER & 0x04ul) == 0x04ul)
;;;272            {
;;;273                u32Len = Minimum(u32Len, g_hsusbd_sInfo->gu32HidReportSize[gUsbCmd.wIndex & 0xfful]);
;;;274                HSUSBD_PrepareCtrlIn((uint8_t *)g_hsusbd_sInfo->gu8HidReportDesc[gUsbCmd.wIndex & 0xfful], u32Len);
;;;275            }
;;;276            else
;;;277            {
;;;278                u32Len = Minimum(u32Len, g_hsusbd_sInfo->gu32FSHidReportSize[gUsbCmd.wIndex & 0xfful]);
;;;279                HSUSBD_PrepareCtrlIn((uint8_t *)g_hsusbd_sInfo->gu8FSHidReportDesc[gUsbCmd.wIndex & 0xfful], u32Len);
;;;280            }
;;;281            break;
;;;282        }
;;;283        /* Get String Descriptor */
;;;284        case DESC_STRING:
;;;285        {
;;;286            if((gUsbCmd.wValue & 0xfful) < 8ul)
;;;287            {
;;;288                u32Len = Minimum(u32Len, g_hsusbd_sInfo->gu8StringDesc[gUsbCmd.wValue & 0xfful][0]);
;;;289                if ((u32Len % g_hsusbd_CtrlMaxPktSize) == 0ul)
;;;290                {
;;;291                    g_hsusbd_CtrlZero = (uint8_t)1ul;
;;;292                }
;;;293                HSUSBD_PrepareCtrlIn((uint8_t *)g_hsusbd_sInfo->gu8StringDesc[gUsbCmd.wValue & 0xfful], u32Len);
;;;294            }
;;;295            else
;;;296            {
;;;297                HSUSBD_SET_CEP_STATE(HSUSBD_CEPCTL_STALLEN_Msk);
000020  f04f0c02          MOV      r12,#2
000024  2b06              CMP      r3,#6                 ;174
000026  d022              BEQ      |L3.110|
000028  dc06              BGT      |L3.56|
00002a  2b01              CMP      r3,#1                 ;174
00002c  d00b              BEQ      |L3.70|
00002e  2b02              CMP      r3,#2                 ;174
000030  d00e              BEQ      |L3.80|
000032  2b03              CMP      r3,#3                 ;174
000034  d173              BNE      |L3.286|
000036  e05b              B        |L3.240|
                  |L3.56|
000038  2b07              CMP      r3,#7                 ;174
00003a  d01d              BEQ      |L3.120|
00003c  2b21              CMP      r3,#0x21              ;174
00003e  d02a              BEQ      |L3.150|
000040  2b22              CMP      r3,#0x22              ;174
000042  d16c              BNE      |L3.286|
000044  e037              B        |L3.182|
                  |L3.70|
000046  2912              CMP      r1,#0x12              ;179
000048  d300              BCC      |L3.76|
00004a  2112              MOVS     r1,#0x12              ;179
                  |L3.76|
00004c  6810              LDR      r0,[r2,#0]            ;181
00004e  e062              B        |L3.278|
                  |L3.80|
000050  69bb              LDR      r3,[r7,#0x18]         ;187
000052  075b              LSLS     r3,r3,#29             ;187
000054  d501              BPL      |L3.90|
000056  6852              LDR      r2,[r2,#4]            ;189
000058  e016              B        |L3.136|
                  |L3.90|
00005a  6912              LDR      r2,[r2,#0x10]         ;201
00005c  e014              B        |L3.136|
                  |L3.94|
00005e  fbb1f3f0          UDIV     r3,r1,r0              ;205
000062  fb001013          MLS      r0,r0,r3,r1           ;205
000066  b900              CBNZ     r0,|L3.106|
000068  716e              STRB     r6,[r5,#5]            ;207
                  |L3.106|
00006a  4610              MOV      r0,r2                 ;207
00006c  e053              B        |L3.278|
                  |L3.110|
00006e  290a              CMP      r1,#0xa               ;218
000070  d300              BCC      |L3.116|
000072  210a              MOVS     r1,#0xa               ;218
                  |L3.116|
000074  68d0              LDR      r0,[r2,#0xc]          ;220
000076  e04e              B        |L3.278|
                  |L3.120|
000078  69bb              LDR      r3,[r7,#0x18]         ;226
00007a  075b              LSLS     r3,r3,#29             ;226
00007c  d503              BPL      |L3.134|
00007e  6952              LDR      r2,[r2,#0x14]         ;228
000080  e002              B        |L3.136|
                  |L3.130|
000082  4619              MOV      r1,r3                 ;231
000084  e7eb              B        |L3.94|
                  |L3.134|
000086  6992              LDR      r2,[r2,#0x18]         ;241
                  |L3.136|
000088  78d3              LDRB     r3,[r2,#3]            ;228
00008a  7897              LDRB     r7,[r2,#2]            ;229
00008c  eb072303          ADD      r3,r7,r3,LSL #8       ;229
000090  4299              CMP      r1,r3                 ;231
000092  d2f6              BCS      |L3.130|
000094  e7e3              B        |L3.94|
                  |L3.150|
000096  2909              CMP      r1,#9                 ;258
000098  d300              BCC      |L3.156|
00009a  2109              MOVS     r1,#9                 ;258
                  |L3.156|
00009c  6855              LDR      r5,[r2,#4]            ;258
00009e  2200              MOVS     r2,#0                 ;258
0000a0  4b23              LDR      r3,|L3.304|
0000a2  4608              MOV      r0,r1                 ;259
0000a4  3512              ADDS     r5,r5,#0x12           ;259
0000a6  e002              B        |L3.174|
                  |L3.168|
0000a8  5cae              LDRB     r6,[r5,r2]            ;259
0000aa  549e              STRB     r6,[r3,r2]            ;259
0000ac  1c52              ADDS     r2,r2,#1              ;259
                  |L3.174|
0000ae  1e40              SUBS     r0,r0,#1              ;259
0000b0  d2fa              BCS      |L3.168|
0000b2  481f              LDR      r0,|L3.304|
0000b4  e02f              B        |L3.278|
                  |L3.182|
0000b6  fbb1f3f0          UDIV     r3,r1,r0              ;266
0000ba  fb001013          MLS      r0,r0,r3,r1           ;266
0000be  b900              CBNZ     r0,|L3.194|
0000c0  716e              STRB     r6,[r5,#5]            ;268
                  |L3.194|
0000c2  69b8              LDR      r0,[r7,#0x18]         ;271
0000c4  0743              LSLS     r3,r0,#29             ;271
0000c6  4818              LDR      r0,|L3.296|
0000c8  7900              LDRB     r0,[r0,#4]            ;273
0000ca  d507              BPL      |L3.220|
0000cc  6a13              LDR      r3,[r2,#0x20]         ;273
0000ce  f8533020          LDR      r3,[r3,r0,LSL #2]     ;273
0000d2  428b              CMP      r3,r1                 ;273
0000d4  d800              BHI      |L3.216|
0000d6  4619              MOV      r1,r3                 ;273
                  |L3.216|
0000d8  69d2              LDR      r2,[r2,#0x1c]         ;274
0000da  e006              B        |L3.234|
                  |L3.220|
0000dc  6a93              LDR      r3,[r2,#0x28]         ;278
0000de  f8533020          LDR      r3,[r3,r0,LSL #2]     ;278
0000e2  428b              CMP      r3,r1                 ;278
0000e4  d800              BHI      |L3.232|
0000e6  4619              MOV      r1,r3                 ;278
                  |L3.232|
0000e8  6a52              LDR      r2,[r2,#0x24]         ;279
                  |L3.234|
0000ea  f8520020          LDR      r0,[r2,r0,LSL #2]     ;279
0000ee  e012              B        |L3.278|
                  |L3.240|
0000f0  f00e03ff          AND      r3,lr,#0xff           ;286
0000f4  2b08              CMP      r3,#8                 ;286
0000f6  d212              BCS      |L3.286|
0000f8  6897              LDR      r7,[r2,#8]            ;288
0000fa  f8572023          LDR      r2,[r7,r3,LSL #2]     ;288
0000fe  7812              LDRB     r2,[r2,#0]            ;288
000100  428a              CMP      r2,r1                 ;288
000102  d800              BHI      |L3.262|
000104  4611              MOV      r1,r2                 ;288
                  |L3.262|
000106  fbb1f2f0          UDIV     r2,r1,r0              ;289
00010a  fb001012          MLS      r0,r0,r2,r1           ;289
00010e  b900              CBNZ     r0,|L3.274|
000110  716e              STRB     r6,[r5,#5]            ;291
                  |L3.274|
000112  f8570023          LDR      r0,[r7,r3,LSL #2]     ;293
                  |L3.278|
000116  f7fffffe          BL       HSUSBD_PrepareCtrlIn
00011a  e003              B        |L3.292|
00011c  e7ff              B        |L3.286|
                  |L3.286|
00011e  f8c7c02c          STR      r12,[r7,#0x2c]
;;;298                val = 1;
000122  2401              MOVS     r4,#1
                  |L3.292|
;;;299            }
;;;300            break;
;;;301        }
;;;302        default:
;;;303            /* Not support. Reply STALL. */
;;;304            HSUSBD_SET_CEP_STATE(HSUSBD_CEPCTL_STALLEN_Msk);
;;;305            val = 1;
;;;306            break;
;;;307        }
;;;308        return val;
000124  4620              MOV      r0,r4
;;;309    }
000126  bdf0              POP      {r4-r7,pc}
;;;310    
                          ENDP

                  |L3.296|
                          DCD      ||.data||+0x2c
                  |L3.300|
                          DCD      0x40019000
                  |L3.304|
                          DCD      ||.bss||

                          AREA ||i.HSUSBD_Open||, CODE, READONLY, ALIGN=2

                  HSUSBD_Open PROC
;;;66      */
;;;67     void HSUSBD_Open(S_HSUSBD_INFO_T *param, HSUSBD_CLASS_REQ pfnClassReq, HSUSBD_SET_INTERFACE_REQ pfnSetInterface)
000000  4b0b              LDR      r3,|L4.48|
;;;68     {
;;;69         g_hsusbd_sInfo = param;
000002  6298              STR      r0,[r3,#0x28]  ; g_hsusbd_sInfo
000004  e9c31203          STRD     r1,r2,[r3,#0xc]
;;;70         g_hsusbd_pfnClassRequest = pfnClassReq;
;;;71         g_hsusbd_pfnSetInterface = pfnSetInterface;
;;;72     
;;;73         /* get EP0 maximum packet size */
;;;74         g_hsusbd_CtrlMaxPktSize = g_hsusbd_sInfo->gu8DevDesc[7];
000008  6800              LDR      r0,[r0,#0]
00000a  79c0              LDRB     r0,[r0,#7]
;;;75     
;;;76         /* Initial USB engine */
;;;77         /* Enable PHY */
;;;78         HSUSBD_ENABLE_PHY();
00000c  61d8              STR      r0,[r3,#0x1c]  ; g_hsusbd_CtrlMaxPktSize
00000e  4b09              LDR      r3,|L4.52|
000010  6818              LDR      r0,[r3,#0]
000012  f4407000          ORR      r0,r0,#0x200
000016  6018              STR      r0,[r3,#0]
;;;79         /* wait PHY clock ready */
;;;80         while (1)
;;;81         {
;;;82             HSUSBD->EP[EPA].EPMPS = 0x20ul;
000018  4807              LDR      r0,|L4.56|
00001a  2120              MOVS     r1,#0x20
                  |L4.28|
00001c  6781              STR      r1,[r0,#0x78]
;;;83             if (HSUSBD->EP[EPA].EPMPS == 0x20ul)
00001e  6f82              LDR      r2,[r0,#0x78]
000020  2a20              CMP      r2,#0x20
000022  d1fb              BNE      |L4.28|
;;;84             {
;;;85                 break;
;;;86             }
;;;87         }
;;;88         /* Force SE0, and then clear it to connect*/
;;;89         HSUSBD_SET_SE0();
000024  6818              LDR      r0,[r3,#0]
000026  f4207080          BIC      r0,r0,#0x100
00002a  6018              STR      r0,[r3,#0]
;;;90     }
00002c  4770              BX       lr
;;;91     
                          ENDP

00002e  0000              DCW      0x0000
                  |L4.48|
                          DCD      ||.data||
                  |L4.52|
                          DCD      0x40019704
                  |L4.56|
                          DCD      0x40019000

                          AREA ||i.HSUSBD_PrepareCtrlIn||, CODE, READONLY, ALIGN=2

                  HSUSBD_PrepareCtrlIn PROC
;;;588     */
;;;589    void HSUSBD_PrepareCtrlIn(uint8_t pu8Buf[], uint32_t u32Size)
000000  4a01              LDR      r2,|L5.8|
;;;590    {
;;;591        g_hsusbd_CtrlInPointer = pu8Buf;
;;;592        g_hsusbd_CtrlInSize = u32Size;
000002  6251              STR      r1,[r2,#0x24]  ; g_hsusbd_CtrlInSize
000004  6190              STR      r0,[r2,#0x18]  ; g_hsusbd_CtrlInPointer
;;;593    }
000006  4770              BX       lr
;;;594    
                          ENDP

                  |L5.8|
                          DCD      ||.data||

                          AREA ||i.HSUSBD_ProcessSetupPacket||, CODE, READONLY, ALIGN=2

                  HSUSBD_ProcessSetupPacket PROC
;;;114     */
;;;115    void HSUSBD_ProcessSetupPacket(void)
000000  4910              LDR      r1,|L6.68|
;;;116    {
;;;117        /* Setup packet process */
;;;118        gUsbCmd.bmRequestType = (uint8_t)(HSUSBD->SETUP1_0 & 0xfful);
000002  6c4a              LDR      r2,[r1,#0x44]
000004  4810              LDR      r0,|L6.72|
000006  7002              STRB     r2,[r0,#0]
;;;119        gUsbCmd.bRequest = (uint8_t)((HSUSBD->SETUP1_0 >> 8) & 0xfful);
000008  6c4b              LDR      r3,[r1,#0x44]
00000a  0a1b              LSRS     r3,r3,#8
00000c  7043              STRB     r3,[r0,#1]
;;;120        gUsbCmd.wValue = (uint16_t)HSUSBD->SETUP3_2;
00000e  6c8b              LDR      r3,[r1,#0x48]
000010  8043              STRH     r3,[r0,#2]
;;;121        gUsbCmd.wIndex = (uint16_t)HSUSBD->SETUP5_4;
000012  6ccb              LDR      r3,[r1,#0x4c]
000014  8083              STRH     r3,[r0,#4]
;;;122        gUsbCmd.wLength = (uint16_t)HSUSBD->SETUP7_6;
000016  6d0b              LDR      r3,[r1,#0x50]
000018  80c3              STRH     r3,[r0,#6]
;;;123    
;;;124        /* USB device request in setup packet: offset 0, D[6..5]: 0=Standard, 1=Class, 2=Vendor, 3=Reserved */
;;;125        switch (gUsbCmd.bmRequestType & 0x60ul)
00001a  f0120060          ANDS     r0,r2,#0x60
00001e  d008              BEQ      |L6.50|
;;;126        {
;;;127        case REQ_STANDARD:
;;;128        {
;;;129            HSUSBD_StandardRequest();
;;;130            break;
;;;131        }
;;;132        case REQ_CLASS:
;;;133        {
;;;134            if (g_hsusbd_pfnClassRequest != NULL)
000020  4a09              LDR      r2,|L6.72|
000022  3a2c              SUBS     r2,r2,#0x2c
000024  2820              CMP      r0,#0x20              ;125
000026  d006              BEQ      |L6.54|
000028  2840              CMP      r0,#0x40              ;125
00002a  d006              BEQ      |L6.58|
;;;135            {
;;;136                g_hsusbd_pfnClassRequest();
;;;137            }
;;;138            break;
;;;139        }
;;;140        case REQ_VENDOR:
;;;141        {
;;;142            if (g_hsusbd_pfnVendorRequest != NULL)
;;;143            {
;;;144                g_hsusbd_pfnVendorRequest();
;;;145            }
;;;146            break;
;;;147        }
;;;148        default:
;;;149        {
;;;150            /* Setup error, stall the device */
;;;151            HSUSBD_SET_CEP_STATE(HSUSBD_CEPCTL_STALLEN_Msk);
00002c  2002              MOVS     r0,#2
00002e  62c8              STR      r0,[r1,#0x2c]
                  |L6.48|
;;;152            break;
;;;153        }
;;;154        }
;;;155    }
000030  4770              BX       lr
                  |L6.50|
000032  f7ffbffe          B.W      HSUSBD_StandardRequest
                  |L6.54|
000036  68d0              LDR      r0,[r2,#0xc]          ;134  ; g_hsusbd_pfnClassRequest
000038  e000              B        |L6.60|
                  |L6.58|
00003a  6890              LDR      r0,[r2,#8]            ;142  ; g_hsusbd_pfnVendorRequest
                  |L6.60|
00003c  2800              CMP      r0,#0                 ;142
00003e  d0f7              BEQ      |L6.48|
000040  4700              BX       r0                    ;144
;;;156    
                          ENDP

000042  0000              DCW      0x0000
                  |L6.68|
                          DCD      0x40019000
                  |L6.72|
                          DCD      ||.data||+0x2c

                          AREA ||i.HSUSBD_SetVendorRequest||, CODE, READONLY, ALIGN=2

                  HSUSBD_SetVendorRequest PROC
;;;700     */
;;;701    void HSUSBD_SetVendorRequest(HSUSBD_VENDOR_REQ pfnVendorReq)
000000  4901              LDR      r1,|L7.8|
;;;702    {
;;;703        g_hsusbd_pfnVendorRequest = pfnVendorReq;
000002  6088              STR      r0,[r1,#8]  ; g_hsusbd_pfnVendorRequest
;;;704    }
000004  4770              BX       lr
;;;705    
                          ENDP

000006  0000              DCW      0x0000
                  |L7.8|
                          DCD      ||.data||

                          AREA ||i.HSUSBD_StandardRequest||, CODE, READONLY, ALIGN=2

                  HSUSBD_StandardRequest PROC
;;;320     */
;;;321    void HSUSBD_StandardRequest(void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;322    {
;;;323        /* clear global variables for new request */
;;;324        g_hsusbd_CtrlInPointer = 0;
000004  4f5a              LDR      r7,|L8.368|
000006  2500              MOVS     r5,#0
;;;325        g_hsusbd_CtrlInSize = 0ul;
;;;326    
;;;327        if ((gUsbCmd.bmRequestType & 0x80ul) == 0x80ul)   /* request data transfer direction */
000008  f107002c          ADD      r0,r7,#0x2c
00000c  61bd              STR      r5,[r7,#0x18]         ;325  ; g_hsusbd_CtrlInPointer
00000e  627d              STR      r5,[r7,#0x24]  ; g_hsusbd_CtrlInSize
000010  f107012c          ADD      r1,r7,#0x2c
000014  7800              LDRB     r0,[r0,#0]  ; gUsbCmd
;;;328        {
;;;329            /* Device to host */
;;;330            switch (gUsbCmd.bRequest)
;;;331            {
;;;332            case GET_CONFIGURATION:
;;;333            {
;;;334                /* Return current configuration setting */
;;;335                HSUSBD_PrepareCtrlIn((uint8_t *)&g_hsusbd_UsbConfig, 1ul);
;;;336    
;;;337                HSUSBD_CLR_CEP_INT_FLAG(HSUSBD_CEPINTSTS_INTKIF_Msk);
;;;338                HSUSBD_ENABLE_CEP_INT(HSUSBD_CEPINTEN_INTKIEN_Msk);
;;;339                break;
;;;340            }
;;;341            case GET_DESCRIPTOR:
;;;342            {
;;;343                if (!HSUSBD_GetDescriptor())
;;;344                {
;;;345                    HSUSBD_CLR_CEP_INT_FLAG(HSUSBD_CEPINTSTS_INTKIF_Msk);
;;;346                    HSUSBD_ENABLE_CEP_INT(HSUSBD_CEPINTEN_INTKIEN_Msk);
;;;347                }
;;;348                break;
;;;349            }
;;;350            case GET_INTERFACE:
;;;351            {
;;;352                /* Return current interface setting */
;;;353                HSUSBD_PrepareCtrlIn((uint8_t *)&g_hsusbd_UsbAltInterface, 1ul);
;;;354    
;;;355                HSUSBD_CLR_CEP_INT_FLAG(HSUSBD_CEPINTSTS_INTKIF_Msk);
;;;356                HSUSBD_ENABLE_CEP_INT(HSUSBD_CEPINTEN_INTKIEN_Msk);
;;;357                break;
;;;358            }
;;;359            case GET_STATUS:
;;;360            {
;;;361                /* Device */
;;;362                if (gUsbCmd.bmRequestType == 0x80ul)
;;;363                {
;;;364                    if ((g_hsusbd_sInfo->gu8ConfigDesc[7] & 0x40ul) == 0x40ul)
;;;365                    {
;;;366                        g_hsusbd_buf[0] = (uint8_t)1ul; /* Self-Powered */
;;;367                    }
;;;368                    else
;;;369                    {
;;;370                        g_hsusbd_buf[0] = (uint8_t)0ul; /* bus-Powered */
;;;371                    }
;;;372                }
;;;373                /* Interface */
;;;374                else if (gUsbCmd.bmRequestType == 0x81ul)
;;;375                {
;;;376                    g_hsusbd_buf[0] = (uint8_t)0ul;
;;;377                }
;;;378                /* Endpoint */
;;;379                else if (gUsbCmd.bmRequestType == 0x82ul)
;;;380                {
;;;381                    uint8_t ep = (uint8_t)(gUsbCmd.wIndex & 0xFul);
000016  f8b1c004          LDRH     r12,[r1,#4]
00001a  7849              LDRB     r1,[r1,#1]            ;330
00001c  4c55              LDR      r4,|L8.372|
00001e  0606              LSLS     r6,r0,#24             ;327
;;;382                    g_hsusbd_buf[0] = (uint8_t)HSUSBD_GetStall((uint32_t)ep)? (uint8_t)1 : (uint8_t)0;
;;;383                }
;;;384                g_hsusbd_buf[1] = (uint8_t)0ul;
;;;385                HSUSBD_PrepareCtrlIn(g_hsusbd_buf, 2ul);
000020  f04f0902          MOV      r9,#2
000024  f00c020f          AND      r2,r12,#0xf           ;381
000028  f04f0301          MOV      r3,#1                 ;335
00002c  d54c              BPL      |L8.200|
00002e  2608              MOVS     r6,#8                 ;330
000030  b199              CBZ      r1,|L8.90|
000032  2906              CMP      r1,#6                 ;330
000034  d007              BEQ      |L8.70|
000036  2908              CMP      r1,#8                 ;330
000038  d002              BEQ      |L8.64|
00003a  290a              CMP      r1,#0xa               ;330
00003c  d140              BNE      |L8.192|
00003e  e008              B        |L8.82|
                  |L8.64|
000040  2101              MOVS     r1,#1                 ;335
000042  484b              LDR      r0,|L8.368|
000044  e039              B        |L8.186|
                  |L8.70|
000046  f7fffffe          BL       HSUSBD_GetDescriptor
00004a  2800              CMP      r0,#0                 ;343
00004c  d13a              BNE      |L8.196|
                  |L8.78|
00004e  6366              STR      r6,[r4,#0x34]         ;345
000050  e058              B        |L8.260|
                  |L8.82|
000052  4847              LDR      r0,|L8.368|
000054  2101              MOVS     r1,#1                 ;353
000056  1c40              ADDS     r0,r0,#1              ;353
000058  e02f              B        |L8.186|
                  |L8.90|
00005a  4947              LDR      r1,|L8.376|
00005c  2880              CMP      r0,#0x80              ;362
00005e  d004              BEQ      |L8.106|
000060  2881              CMP      r0,#0x81              ;374
000062  d009              BEQ      |L8.120|
000064  2882              CMP      r0,#0x82              ;379
000066  d009              BEQ      |L8.124|
000068  e024              B        |L8.180|
                  |L8.106|
00006a  6ab8              LDR      r0,[r7,#0x28]         ;364  ; g_hsusbd_sInfo
00006c  6840              LDR      r0,[r0,#4]            ;364
00006e  79c0              LDRB     r0,[r0,#7]            ;364
000070  0640              LSLS     r0,r0,#25             ;364
000072  d501              BPL      |L8.120|
000074  700b              STRB     r3,[r1,#0]            ;366
000076  e01d              B        |L8.180|
                  |L8.120|
000078  700d              STRB     r5,[r1,#0]            ;376
00007a  e01b              B        |L8.180|
                  |L8.124|
00007c  2300              MOVS     r3,#0                 ;376
00007e  4618              MOV      r0,r3                 ;376
                  |L8.128|
000080  eb000780          ADD      r7,r0,r0,LSL #2       ;376
000084  eb0407c7          ADD      r7,r4,r7,LSL #3       ;376
000088  f8d77080          LDR      r7,[r7,#0x80]         ;376
00008c  f3c71703          UBFX     r7,r7,#4,#4           ;376
000090  4297              CMP      r7,r2                 ;376
000092  d107              BNE      |L8.164|
000094  eb000080          ADD      r0,r0,r0,LSL #2       ;376
000098  eb0400c0          ADD      r0,r4,r0,LSL #3       ;376
00009c  6f40              LDR      r0,[r0,#0x74]         ;376
00009e  f0000310          AND      r3,r0,#0x10           ;376
0000a2  e002              B        |L8.170|
                  |L8.164|
0000a4  1c40              ADDS     r0,r0,#1              ;376
0000a6  280c              CMP      r0,#0xc               ;376
0000a8  d3ea              BCC      |L8.128|
                  |L8.170|
0000aa  b10b              CBZ      r3,|L8.176|
0000ac  2001              MOVS     r0,#1                 ;382
0000ae  e000              B        |L8.178|
                  |L8.176|
0000b0  2000              MOVS     r0,#0                 ;382
                  |L8.178|
0000b2  7008              STRB     r0,[r1,#0]            ;382
                  |L8.180|
0000b4  704d              STRB     r5,[r1,#1]            ;384
0000b6  2102              MOVS     r1,#2
0000b8  482f              LDR      r0,|L8.376|
                  |L8.186|
0000ba  f7fffffe          BL       HSUSBD_PrepareCtrlIn
0000be  e7c6              B        |L8.78|
                  |L8.192|
;;;386                HSUSBD_CLR_CEP_INT_FLAG(HSUSBD_CEPINTSTS_INTKIF_Msk);
;;;387                HSUSBD_ENABLE_CEP_INT(HSUSBD_CEPINTEN_INTKIEN_Msk);
;;;388                break;
;;;389            }
;;;390            default:
;;;391            {
;;;392                /* Setup error, stall the device */
;;;393                HSUSBD_SET_CEP_STATE(HSUSBD_CEPCTL_STALLEN_Msk);
0000c0  f8c4902c          STR      r9,[r4,#0x2c]
                  |L8.196|
;;;394                break;
;;;395            }
;;;396            }
;;;397        }
;;;398        else
;;;399        {
;;;400            /* Host to device */
;;;401            switch (gUsbCmd.bRequest)
;;;402            {
;;;403            case CLEAR_FEATURE:
;;;404            {
;;;405                if((gUsbCmd.wValue & 0xfful) == FEATURE_ENDPOINT_HALT)
;;;406                {
;;;407    
;;;408                    uint32_t epNum, i;
;;;409    
;;;410                    /* EP number stall is not allow to be clear in MSC class "Error Recovery Test".
;;;411                       a flag: g_u32HsEpStallLock is added to support it */
;;;412                    epNum = (uint32_t)(gUsbCmd.wIndex & 0xFul);
;;;413                    for (i=0ul; i<HSUSBD_MAX_EP; i++)
;;;414                    {
;;;415                        if ((((HSUSBD->EP[i].EPCFG & 0xf0ul) >> 4) == epNum) && ((g_u32HsEpStallLock & (1ul << i)) == 0ul))
;;;416                        {
;;;417                            HSUSBD->EP[i].EPRSPCTL = (HSUSBD->EP[i].EPRSPCTL & 0xeful) | HSUSBD_EP_RSPCTL_TOGGLE;
;;;418                        }
;;;419                    }
;;;420                }
;;;421                /* Status stage */
;;;422                HSUSBD_CLR_CEP_INT_FLAG(HSUSBD_CEPINTSTS_STSDONEIF_Msk);
;;;423                HSUSBD_SET_CEP_STATE(HSUSBD_CEPCTL_NAKCLR);
;;;424                HSUSBD_ENABLE_CEP_INT(HSUSBD_CEPINTEN_STSDONEIEN_Msk);
;;;425                break;
;;;426            }
;;;427            case SET_ADDRESS:
;;;428            {
;;;429                g_hsusbd_UsbAddr = (uint8_t)gUsbCmd.wValue;
;;;430                /* Status Stage */
;;;431                HSUSBD_CLR_CEP_INT_FLAG(HSUSBD_CEPINTSTS_STSDONEIF_Msk);
;;;432                HSUSBD_SET_CEP_STATE(HSUSBD_CEPCTL_NAKCLR);
;;;433                HSUSBD_ENABLE_CEP_INT(HSUSBD_CEPINTEN_STSDONEIEN_Msk);
;;;434                break;
;;;435            }
;;;436            case SET_CONFIGURATION:
;;;437            {
;;;438                g_hsusbd_UsbConfig = (uint8_t)gUsbCmd.wValue;
;;;439                g_hsusbd_Configured = (uint8_t)1ul;
;;;440                /* Status stage */
;;;441                HSUSBD_CLR_CEP_INT_FLAG(HSUSBD_CEPINTSTS_STSDONEIF_Msk);
;;;442                HSUSBD_SET_CEP_STATE(HSUSBD_CEPCTL_NAKCLR);
;;;443                HSUSBD_ENABLE_CEP_INT(HSUSBD_CEPINTEN_STSDONEIEN_Msk);
;;;444                break;
;;;445            }
;;;446            case SET_FEATURE:
;;;447            {
;;;448                if ((gUsbCmd.wValue & 0x3ul) == 2ul)    /* TEST_MODE */
;;;449                {
;;;450                    g_hsusbd_EnableTestMode = (uint8_t)1ul;
;;;451                    g_hsusbd_TestSelector = (uint8_t)(gUsbCmd.wIndex >> 8);
;;;452                }
;;;453                if ((gUsbCmd.wValue & 0x3ul) == 3ul)    /* HNP ebable */
;;;454                {
;;;455                    HSOTG->CTL |= (HSOTG_CTL_HNPREQEN_Msk | HSOTG_CTL_BUSREQ_Msk);
;;;456                }
;;;457    
;;;458                /* Status stage */
;;;459                HSUSBD_CLR_CEP_INT_FLAG(HSUSBD_CEPINTSTS_STSDONEIF_Msk);
;;;460                HSUSBD_SET_CEP_STATE(HSUSBD_CEPCTL_NAKCLR);
;;;461                HSUSBD_ENABLE_CEP_INT(HSUSBD_CEPINTEN_STSDONEIEN_Msk);
;;;462                break;
;;;463            }
;;;464            case SET_INTERFACE:
;;;465            {
;;;466                g_hsusbd_UsbAltInterface = (uint8_t)gUsbCmd.wValue;
;;;467                if (g_hsusbd_pfnSetInterface != NULL)
;;;468                {
;;;469                    g_hsusbd_pfnSetInterface((uint32_t)g_hsusbd_UsbAltInterface);
;;;470                }
;;;471                /* Status stage */
;;;472                HSUSBD_CLR_CEP_INT_FLAG(HSUSBD_CEPINTSTS_STSDONEIF_Msk);
;;;473                HSUSBD_SET_CEP_STATE(HSUSBD_CEPCTL_NAKCLR);
;;;474                HSUSBD_ENABLE_CEP_INT(HSUSBD_CEPINTEN_STSDONEIEN_Msk);
;;;475                break;
;;;476            }
;;;477            default:
;;;478            {
;;;479                /* Setup error, stall the device */
;;;480                HSUSBD_SET_CEP_STATE(HSUSBD_CEPCTL_STALLEN_Msk);
;;;481                break;
;;;482            }
;;;483            }
;;;484        }
;;;485    }
0000c4  e8bd87f0          POP      {r4-r10,pc}
                  |L8.200|
0000c8  4829              LDR      r0,|L8.368|
0000ca  f44f6680          MOV      r6,#0x400             ;422
0000ce  302c              ADDS     r0,r0,#0x2c           ;327
0000d0  2905              CMP      r1,#5                 ;401
0000d2  f8b08002          LDRH     r8,[r0,#2]            ;405
0000d6  f00800ff          AND      r0,r8,#0xff           ;405
0000da  d035              BEQ      |L8.328|
0000dc  dc08              BGT      |L8.240|
0000de  2901              CMP      r1,#1                 ;401
0000e0  d012              BEQ      |L8.264|
0000e2  2903              CMP      r1,#3                 ;401
0000e4  d1ec              BNE      |L8.192|
0000e6  f0080003          AND      r0,r8,#3              ;448
0000ea  2802              CMP      r0,#2                 ;448
0000ec  d031              BEQ      |L8.338|
0000ee  e034              B        |L8.346|
                  |L8.240|
0000f0  2909              CMP      r1,#9                 ;401
0000f2  d02b              BEQ      |L8.332|
0000f4  290b              CMP      r1,#0xb               ;401
0000f6  d1e3              BNE      |L8.192|
0000f8  7078              STRB     r0,[r7,#1]            ;466
0000fa  6939              LDR      r1,[r7,#0x10]         ;467  ; g_hsusbd_pfnSetInterface
0000fc  b101              CBZ      r1,|L8.256|
0000fe  4788              BLX      r1                    ;469
                  |L8.256|
000100  6366              STR      r6,[r4,#0x34]         ;472
000102  62e5              STR      r5,[r4,#0x2c]         ;473
                  |L8.260|
000104  6326              STR      r6,[r4,#0x30]         ;346
000106  e7dd              B        |L8.196|
                  |L8.264|
000108  f0180fff          TST      r8,#0xff              ;405
00010c  d1f8              BNE      |L8.256|
00010e  697f              LDR      r7,[r7,#0x14]         ;415
000110  2000              MOVS     r0,#0                 ;413
                  |L8.274|
000112  eb000180          ADD      r1,r0,r0,LSL #2       ;415
000116  eb0401c1          ADD      r1,r4,r1,LSL #3       ;415
00011a  f8d1c080          LDR      r12,[r1,#0x80]        ;415
00011e  f3cc1c03          UBFX     r12,r12,#4,#4         ;415
000122  4594              CMP      r12,r2                ;415
000124  d10c              BNE      |L8.320|
000126  fa03fc00          LSL      r12,r3,r0             ;415
00012a  ea1c0f07          TST      r12,r7                ;415
00012e  d107              BNE      |L8.320|
000130  f8d1c074          LDR      r12,[r1,#0x74]        ;417
000134  f00c0cef          AND      r12,r12,#0xef         ;417
000138  f04c0c08          ORR      r12,r12,#8            ;417
00013c  f8c1c074          STR      r12,[r1,#0x74]        ;417
                  |L8.320|
000140  1c40              ADDS     r0,r0,#1              ;417
000142  280c              CMP      r0,#0xc               ;413
000144  d3e5              BCC      |L8.274|
000146  e7db              B        |L8.256|
                  |L8.328|
000148  71b8              STRB     r0,[r7,#6]            ;429
00014a  e7d9              B        |L8.256|
                  |L8.332|
00014c  7038              STRB     r0,[r7,#0]            ;438
00014e  713b              STRB     r3,[r7,#4]            ;439
000150  e7d6              B        |L8.256|
                  |L8.338|
000152  70bb              STRB     r3,[r7,#2]            ;450
000154  ea4f201c          LSR      r0,r12,#8             ;451
000158  70f8              STRB     r0,[r7,#3]            ;451
                  |L8.346|
00015a  ea6f0008          MVN      r0,r8                 ;453
00015e  0780              LSLS     r0,r0,#30             ;453
000160  d1ce              BNE      |L8.256|
000162  4806              LDR      r0,|L8.380|
000164  6801              LDR      r1,[r0,#0]            ;455
000166  f0410106          ORR      r1,r1,#6              ;455
00016a  6001              STR      r1,[r0,#0]            ;455
00016c  e7c8              B        |L8.256|
;;;486    
                          ENDP

00016e  0000              DCW      0x0000
                  |L8.368|
                          DCD      ||.data||
                  |L8.372|
                          DCD      0x40019000
                  |L8.376|
                          DCD      ||.bss||
                  |L8.380|
                          DCD      0x4004f000

                          AREA ||i.HSUSBD_Start||, CODE, READONLY, ALIGN=2

                  HSUSBD_Start PROC
;;;100     */
;;;101    void HSUSBD_Start(void)
000000  4802              LDR      r0,|L9.12|
;;;102    {
;;;103        HSUSBD_CLR_SE0();
000002  6801              LDR      r1,[r0,#0]
000004  f4417180          ORR      r1,r1,#0x100
000008  6001              STR      r1,[r0,#0]
;;;104    }
00000a  4770              BX       lr
;;;105    
                          ENDP

                  |L9.12|
                          DCD      0x40019704

                          AREA ||i.HSUSBD_SwReset||, CODE, READONLY, ALIGN=2

                  HSUSBD_SwReset PROC
;;;679     */
;;;680    void HSUSBD_SwReset(void)
000000  4904              LDR      r1,|L10.20|
;;;681    {
;;;682        /* Reset all variables for protocol */
;;;683        g_hsusbd_UsbAddr = (uint8_t)0ul;
000002  2000              MOVS     r0,#0
000004  7188              STRB     r0,[r1,#6]
;;;684        g_hsusbd_DmaDone = 0ul;
000006  6208              STR      r0,[r1,#0x20]  ; g_hsusbd_DmaDone
;;;685        g_hsusbd_ShortPacket = (uint8_t)0ul;
000008  71c8              STRB     r0,[r1,#7]
;;;686        g_hsusbd_Configured = (uint8_t)0ul;
00000a  7108              STRB     r0,[r1,#4]
;;;687    
;;;688        /* Reset USB device address */
;;;689        HSUSBD_SET_ADDR(0ul);
00000c  4902              LDR      r1,|L10.24|
00000e  6208              STR      r0,[r1,#0x20]
;;;690    }
000010  4770              BX       lr
;;;691    
                          ENDP

000012  0000              DCW      0x0000
                  |L10.20|
                          DCD      ||.data||
                  |L10.24|
                          DCD      0x40019000

                          AREA ||i.HSUSBD_UpdateDeviceState||, CODE, READONLY, ALIGN=2

                  HSUSBD_UpdateDeviceState PROC
;;;503    
;;;504    void HSUSBD_UpdateDeviceState(void)
000000  b578              PUSH     {r3-r6,lr}
;;;505    {
;;;506        switch (gUsbCmd.bRequest)
000002  4a35              LDR      r2,|L11.216|
000004  4834              LDR      r0,|L11.216|
;;;507        {
;;;508        case SET_ADDRESS:
;;;509        {
;;;510            HSUSBD_SET_ADDR(g_hsusbd_UsbAddr);
;;;511            break;
;;;512        }
;;;513        case SET_CONFIGURATION:
;;;514        {
;;;515            if (g_hsusbd_UsbConfig == 0ul)
;;;516            {
;;;517                uint32_t volatile i;
;;;518                /* Reset PID DATA0 */
;;;519                for (i=0ul; i<HSUSBD_MAX_EP; i++)
;;;520                {
;;;521                    if ((HSUSBD->EP[i].EPCFG & 0x1ul) == 0x1ul)
;;;522                    {
;;;523                        HSUSBD->EP[i].EPRSPCTL = HSUSBD_EP_RSPCTL_TOGGLE;
000006  2408              MOVS     r4,#8
;;;524                    }
;;;525                }
;;;526            }
;;;527            break;
;;;528        }
;;;529        case SET_FEATURE:
;;;530        {
;;;531            if(gUsbCmd.wValue == FEATURE_ENDPOINT_HALT)
000008  8851              LDRH     r1,[r2,#2]
;;;532            {
;;;533                uint32_t idx;
;;;534                idx = (uint32_t)(gUsbCmd.wIndex & 0xFul);
00000a  7912              LDRB     r2,[r2,#4]
00000c  7840              LDRB     r0,[r0,#1]            ;506  ; gUsbCmd
00000e  f002030f          AND      r3,r2,#0xf
000012  4a32              LDR      r2,|L11.220|
000014  2801              CMP      r0,#1                 ;506
000016  d04c              BEQ      |L11.178|
000018  4d2f              LDR      r5,|L11.216|
00001a  2600              MOVS     r6,#0                 ;505
00001c  3d2c              SUBS     r5,r5,#0x2c           ;510
00001e  2803              CMP      r0,#3                 ;506
000020  d01a              BEQ      |L11.88|
000022  2805              CMP      r0,#5                 ;506
000024  d015              BEQ      |L11.82|
000026  2809              CMP      r0,#9                 ;506
000028  d112              BNE      |L11.80|
00002a  7828              LDRB     r0,[r5,#0]            ;515  ; g_hsusbd_UsbConfig
00002c  2800              CMP      r0,#0                 ;515
00002e  d10f              BNE      |L11.80|
000030  9600              STR      r6,[sp,#0]            ;519
                  |L11.50|
000032  9800              LDR      r0,[sp,#0]            ;521
000034  eb000080          ADD      r0,r0,r0,LSL #2       ;521
000038  eb0200c0          ADD      r0,r2,r0,LSL #3       ;521
00003c  f8d01080          LDR      r1,[r0,#0x80]         ;521
000040  07c9              LSLS     r1,r1,#31             ;521
000042  d000              BEQ      |L11.70|
000044  6744              STR      r4,[r0,#0x74]         ;523
                  |L11.70|
000046  9800              LDR      r0,[sp,#0]            ;519
000048  1c40              ADDS     r0,r0,#1              ;519
00004a  9000              STR      r0,[sp,#0]            ;519
00004c  280c              CMP      r0,#0xc               ;519
00004e  d3f0              BCC      |L11.50|
                  |L11.80|
;;;535                HSUSBD_SetStall(idx);
;;;536            }
;;;537            else if (g_hsusbd_EnableTestMode)
;;;538            {
;;;539                g_hsusbd_EnableTestMode = (uint8_t)0ul;
;;;540                if (g_hsusbd_TestSelector == TEST_J)
;;;541                {
;;;542                    HSUSBD->TEST = TEST_J;
;;;543                }
;;;544                else if (g_hsusbd_TestSelector == TEST_K)
;;;545                {
;;;546                    HSUSBD->TEST = TEST_K;
;;;547                }
;;;548                else if (g_hsusbd_TestSelector == TEST_SE0_NAK)
;;;549                {
;;;550                    HSUSBD->TEST = TEST_SE0_NAK;
;;;551                }
;;;552                else if (g_hsusbd_TestSelector == TEST_PACKET)
;;;553                {
;;;554                    HSUSBD->TEST = TEST_PACKET;
;;;555                }
;;;556                else if (g_hsusbd_TestSelector == TEST_FORCE_ENABLE)
;;;557                {
;;;558                    HSUSBD->TEST = TEST_FORCE_ENABLE;
;;;559                }
;;;560            }
;;;561            break;
;;;562        }
;;;563        case CLEAR_FEATURE:
;;;564        {
;;;565            if(gUsbCmd.wValue == FEATURE_ENDPOINT_HALT)
;;;566            {
;;;567                uint32_t idx;
;;;568                idx = (uint32_t)(gUsbCmd.wIndex & 0xFul);
;;;569                HSUSBD_ClearStall(idx);
;;;570            }
;;;571            break;
;;;572        }
;;;573        default:
;;;574            break;
;;;575        }
;;;576    }
000050  bd78              POP      {r3-r6,pc}
                  |L11.82|
000052  79a8              LDRB     r0,[r5,#6]            ;510  ; g_hsusbd_UsbAddr
000054  6210              STR      r0,[r2,#0x20]         ;510
                  |L11.86|
000056  bd78              POP      {r3-r6,pc}
                  |L11.88|
000058  2402              MOVS     r4,#2
00005a  b181              CBZ      r1,|L11.126|
00005c  78a8              LDRB     r0,[r5,#2]            ;537  ; g_hsusbd_EnableTestMode
00005e  2800              CMP      r0,#0                 ;537
000060  d0f9              BEQ      |L11.86|
000062  70ae              STRB     r6,[r5,#2]            ;539
000064  78e8              LDRB     r0,[r5,#3]            ;540  ; g_hsusbd_TestSelector
000066  2801              CMP      r0,#1                 ;540
000068  d007              BEQ      |L11.122|
00006a  2802              CMP      r0,#2                 ;544
00006c  d01f              BEQ      |L11.174|
00006e  2803              CMP      r0,#3                 ;548
000070  d003              BEQ      |L11.122|
000072  2804              CMP      r0,#4                 ;552
000074  d001              BEQ      |L11.122|
000076  2805              CMP      r0,#5                 ;556
000078  d1ed              BNE      |L11.86|
                  |L11.122|
00007a  6250              STR      r0,[r2,#0x24]         ;542
00007c  bd78              POP      {r3-r6,pc}
                  |L11.126|
00007e  b1a3              CBZ      r3,|L11.170|
000080  2000              MOVS     r0,#0
                  |L11.130|
000082  eb000180          ADD      r1,r0,r0,LSL #2
000086  eb0201c1          ADD      r1,r2,r1,LSL #3
00008a  f8d14080          LDR      r4,[r1,#0x80]
00008e  f3c41403          UBFX     r4,r4,#4,#4
000092  429c              CMP      r4,r3
000094  d105              BNE      |L11.162|
000096  6f4c              LDR      r4,[r1,#0x74]
000098  f00404f7          AND      r4,r4,#0xf7
00009c  f0440410          ORR      r4,r4,#0x10
0000a0  674c              STR      r4,[r1,#0x74]
                  |L11.162|
0000a2  1c40              ADDS     r0,r0,#1
0000a4  280c              CMP      r0,#0xc
0000a6  d3ec              BCC      |L11.130|
0000a8  bd78              POP      {r3-r6,pc}
                  |L11.170|
0000aa  62d4              STR      r4,[r2,#0x2c]
0000ac  bd78              POP      {r3-r6,pc}
                  |L11.174|
0000ae  6254              STR      r4,[r2,#0x24]         ;546
                  |L11.176|
0000b0  bd78              POP      {r3-r6,pc}
                  |L11.178|
0000b2  2900              CMP      r1,#0                 ;565
0000b4  d1fc              BNE      |L11.176|
0000b6  2000              MOVS     r0,#0                 ;565
                  |L11.184|
0000b8  eb000180          ADD      r1,r0,r0,LSL #2       ;565
0000bc  eb0201c1          ADD      r1,r2,r1,LSL #3       ;565
0000c0  f8d15080          LDR      r5,[r1,#0x80]         ;565
0000c4  f3c51503          UBFX     r5,r5,#4,#4           ;565
0000c8  429d              CMP      r5,r3                 ;565
0000ca  d100              BNE      |L11.206|
0000cc  674c              STR      r4,[r1,#0x74]         ;565
                  |L11.206|
0000ce  1c40              ADDS     r0,r0,#1              ;565
0000d0  280c              CMP      r0,#0xc               ;565
0000d2  d3f1              BCC      |L11.184|
0000d4  bd78              POP      {r3-r6,pc}
;;;577    
                          ENDP

0000d6  0000              DCW      0x0000
                  |L11.216|
                          DCD      ||.data||+0x2c
                  |L11.220|
                          DCD      0x40019000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_hsusbd_buf
                          %        12

                          AREA ||.data||, DATA, ALIGN=2

                  g_hsusbd_UsbConfig
000000  00                DCB      0x00
                  g_hsusbd_UsbAltInterface
000001  00                DCB      0x00
                  g_hsusbd_EnableTestMode
000002  00                DCB      0x00
                  g_hsusbd_TestSelector
000003  00                DCB      0x00
                  g_hsusbd_Configured
000004  00                DCB      0x00
                  g_hsusbd_CtrlZero
000005  00                DCB      0x00
                  g_hsusbd_UsbAddr
000006  00                DCB      0x00
                  g_hsusbd_ShortPacket
000007  00                DCB      0x00
                  g_hsusbd_pfnVendorRequest
                          DCD      0x00000000
                  g_hsusbd_pfnClassRequest
                          DCD      0x00000000
                  g_hsusbd_pfnSetInterface
                          DCD      0x00000000
                  g_u32HsEpStallLock
                          DCD      0x00000000
                  g_hsusbd_CtrlInPointer
                          DCD      0x00000000
                  g_hsusbd_CtrlMaxPktSize
                          DCD      0x00000040
                  g_hsusbd_DmaDone
                          DCD      0x00000000
                  g_hsusbd_CtrlInSize
                          DCD      0x00000000
                  g_hsusbd_sInfo
                          DCD      0x00000000
                  gUsbCmd
                          %        8

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Library\\StdDriver\\src\\hsusbd.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_hsusbd_c_c680add9____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___8_hsusbd_c_c680add9____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_hsusbd_c_c680add9____REVSH|
#line 402
|__asm___8_hsusbd_c_c680add9____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___8_hsusbd_c_c680add9____RRX|
#line 587
|__asm___8_hsusbd_c_c680add9____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\usbd.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\usbd.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M480\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\usbd.crf ..\..\..\Library\StdDriver\src\usbd.c]
                          THUMB

                          AREA ||i.USBD_CtrlIn||, CODE, READONLY, ALIGN=2

                  USBD_CtrlIn PROC
;;;520      */
;;;521    void USBD_CtrlIn(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;522    {
;;;523        static uint8_t u8ZeroFlag = 0ul;
;;;524        uint32_t addr;
;;;525    
;;;526        if(g_usbd_CtrlInSize)
000004  4c20              LDR      r4,|L1.136|
000006  68e0              LDR      r0,[r4,#0xc]  ; g_usbd_CtrlInSize
;;;527        {
;;;528            /* Process remained data */
;;;529            if(g_usbd_CtrlInSize > g_usbd_CtrlMaxPktSize)
;;;530            {
;;;531                /* Data size > MXPLD */
;;;532                addr = USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0);
;;;533                USBD_MemCopy((uint8_t *)addr, (uint8_t *)g_usbd_CtrlInPointer, g_usbd_CtrlMaxPktSize);
;;;534                USBD_SET_PAYLOAD_LEN(EP0, g_usbd_CtrlMaxPktSize);
000008  4d20              LDR      r5,|L1.140|
00000a  2600              MOVS     r6,#0                 ;526
00000c  b330              CBZ      r0,|L1.92|
00000e  68e3              LDR      r3,[r4,#0xc]          ;529  ; g_usbd_CtrlInSize
000010  6a27              LDR      r7,[r4,#0x20]         ;529  ; g_usbd_CtrlMaxPktSize
000012  1f28              SUBS     r0,r5,#4              ;532
000014  4621              MOV      r1,r4                 ;526
000016  4a1e              LDR      r2,|L1.144|
000018  6849              LDR      r1,[r1,#4]            ;533
;;;535                g_usbd_CtrlInPointer += g_usbd_CtrlMaxPktSize;
;;;536                g_usbd_CtrlInSize -= g_usbd_CtrlMaxPktSize;
;;;537            }
;;;538            else
;;;539            {
;;;540                /* Data size <= MXPLD */
;;;541                addr = USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0);
00001a  6800              LDR      r0,[r0,#0]
00001c  42bb              CMP      r3,r7                 ;529
00001e  4410              ADD      r0,r0,r2
000020  d90e              BLS      |L1.64|
000022  6a22              LDR      r2,[r4,#0x20]         ;533  ; g_usbd_CtrlMaxPktSize
000024  f7fffffe          BL       USBD_MemCopy
000028  6a20              LDR      r0,[r4,#0x20]         ;534  ; g_usbd_CtrlMaxPktSize
00002a  6028              STR      r0,[r5,#0]            ;534
00002c  6a21              LDR      r1,[r4,#0x20]         ;535  ; g_usbd_CtrlMaxPktSize
00002e  6860              LDR      r0,[r4,#4]            ;535  ; g_usbd_CtrlInPointer
000030  4408              ADD      r0,r0,r1              ;535
000032  6060              STR      r0,[r4,#4]            ;536  ; g_usbd_CtrlInPointer
000034  68e0              LDR      r0,[r4,#0xc]          ;536  ; g_usbd_CtrlInSize
000036  6a21              LDR      r1,[r4,#0x20]         ;536  ; g_usbd_CtrlMaxPktSize
000038  1a40              SUBS     r0,r0,r1              ;536
00003a  60e0              STR      r0,[r4,#0xc]          ;536  ; g_usbd_CtrlInSize
                  |L1.60|
;;;542                USBD_MemCopy((uint8_t *)addr, (uint8_t *)g_usbd_CtrlInPointer, g_usbd_CtrlInSize);
;;;543                USBD_SET_PAYLOAD_LEN(EP0, g_usbd_CtrlInSize);
;;;544                if(g_usbd_CtrlInSize == g_usbd_CtrlMaxPktSize)
;;;545                {
;;;546                    u8ZeroFlag = (uint8_t)1ul;
;;;547                }
;;;548                g_usbd_CtrlInPointer = 0;
;;;549                g_usbd_CtrlInSize = 0ul;
;;;550            }
;;;551        }
;;;552        else
;;;553        {
;;;554            /* In ACK for Set address */
;;;555            if((g_usbd_SetupPacket[0] == REQ_STANDARD) && (g_usbd_SetupPacket[1] == SET_ADDRESS))
;;;556            {
;;;557                addr = USBD_GET_ADDR();
;;;558                if((addr != g_usbd_UsbAddr) && (addr == 0ul))
;;;559                {
;;;560                    USBD_SET_ADDR(g_usbd_UsbAddr);
;;;561                }
;;;562            }
;;;563    
;;;564            /* For the case of data size is integral times maximum packet size */
;;;565            if(u8ZeroFlag)
;;;566            {
;;;567                USBD_SET_PAYLOAD_LEN(EP0, 0ul);
;;;568                u8ZeroFlag = (uint8_t)0ul;
;;;569            }
;;;570        }
;;;571    }
00003c  e8bd81f0          POP      {r4-r8,pc}
                  |L1.64|
000040  68e2              LDR      r2,[r4,#0xc]          ;542  ; g_usbd_CtrlInSize
000042  f7fffffe          BL       USBD_MemCopy
000046  68e0              LDR      r0,[r4,#0xc]          ;543  ; g_usbd_CtrlInSize
000048  6028              STR      r0,[r5,#0]            ;543
00004a  68e0              LDR      r0,[r4,#0xc]          ;544  ; g_usbd_CtrlInSize
00004c  6a21              LDR      r1,[r4,#0x20]         ;544  ; g_usbd_CtrlMaxPktSize
00004e  4288              CMP      r0,r1                 ;544
000050  d101              BNE      |L1.86|
000052  2001              MOVS     r0,#1                 ;546
000054  7060              STRB     r0,[r4,#1]            ;546
                  |L1.86|
000056  6066              STR      r6,[r4,#4]            ;549  ; g_usbd_CtrlInPointer
000058  60e6              STR      r6,[r4,#0xc]          ;549  ; g_usbd_CtrlInSize
00005a  e7ef              B        |L1.60|
                  |L1.92|
00005c  480a              LDR      r0,|L1.136|
00005e  3040              ADDS     r0,r0,#0x40           ;555
000060  7801              LDRB     r1,[r0,#0]            ;555  ; g_usbd_SetupPacket
000062  b951              CBNZ     r1,|L1.122|
000064  7840              LDRB     r0,[r0,#1]            ;555  ; g_usbd_SetupPacket
000066  2805              CMP      r0,#5                 ;555
000068  d107              BNE      |L1.122|
00006a  490a              LDR      r1,|L1.148|
00006c  6888              LDR      r0,[r1,#8]            ;557
00006e  69a2              LDR      r2,[r4,#0x18]         ;558  ; g_usbd_UsbAddr
000070  4290              CMP      r0,r2                 ;558
000072  d002              BEQ      |L1.122|
000074  b908              CBNZ     r0,|L1.122|
000076  69a0              LDR      r0,[r4,#0x18]         ;560  ; g_usbd_UsbAddr
000078  6088              STR      r0,[r1,#8]            ;560
                  |L1.122|
00007a  7860              LDRB     r0,[r4,#1]            ;565  ; u8ZeroFlag
00007c  2800              CMP      r0,#0                 ;565
00007e  d0dd              BEQ      |L1.60|
000080  602e              STR      r6,[r5,#0]            ;567
000082  7066              STRB     r6,[r4,#1]            ;568
000084  e7da              B        |L1.60|
;;;572    
                          ENDP

000086  0000              DCW      0x0000
                  |L1.136|
                          DCD      ||.data||
                  |L1.140|
                          DCD      0x400c0504
                  |L1.144|
                          DCD      0x400c0100
                  |L1.148|
                          DCD      0x400c0000

                          AREA ||i.USBD_CtrlOut||, CODE, READONLY, ALIGN=2

                  USBD_CtrlOut PROC
;;;601      */
;;;602    void USBD_CtrlOut(void)
000000  b570              PUSH     {r4-r6,lr}
;;;603    {
;;;604        uint32_t u32Size;
;;;605        uint32_t addr;
;;;606    
;;;607        if(g_usbd_CtrlOutSize < g_usbd_CtrlOutSizeLimit)
000002  4c0e              LDR      r4,|L2.60|
000004  6920              LDR      r0,[r4,#0x10]  ; g_usbd_CtrlOutSize
000006  6961              LDR      r1,[r4,#0x14]  ; g_usbd_CtrlOutSizeLimit
000008  4288              CMP      r0,r1
00000a  d215              BCS      |L2.56|
;;;608        {
;;;609            u32Size = USBD_GET_PAYLOAD_LEN(EP1);
00000c  4e0c              LDR      r6,|L2.64|
00000e  6835              LDR      r5,[r6,#0]
;;;610            addr = USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP1);
000010  1f30              SUBS     r0,r6,#4
000012  6800              LDR      r0,[r0,#0]
000014  490b              LDR      r1,|L2.68|
;;;611            USBD_MemCopy((uint8_t *)g_usbd_CtrlOutPointer, (uint8_t *)addr, u32Size);
000016  462a              MOV      r2,r5
000018  4401              ADD      r1,r1,r0              ;610
00001a  68a0              LDR      r0,[r4,#8]  ; g_usbd_CtrlOutPointer
00001c  f7fffffe          BL       USBD_MemCopy
;;;612            g_usbd_CtrlOutPointer += u32Size;
000020  68a0              LDR      r0,[r4,#8]  ; g_usbd_CtrlOutPointer
000022  4428              ADD      r0,r0,r5
;;;613            g_usbd_CtrlOutSize += u32Size;
000024  60a0              STR      r0,[r4,#8]  ; g_usbd_CtrlOutPointer
000026  6920              LDR      r0,[r4,#0x10]  ; g_usbd_CtrlOutSize
000028  4428              ADD      r0,r0,r5
00002a  6120              STR      r0,[r4,#0x10]  ; g_usbd_CtrlOutSize
;;;614    
;;;615            if(g_usbd_CtrlOutSize < g_usbd_CtrlOutSizeLimit)
00002c  6920              LDR      r0,[r4,#0x10]  ; g_usbd_CtrlOutSize
00002e  6961              LDR      r1,[r4,#0x14]  ; g_usbd_CtrlOutSizeLimit
000030  4288              CMP      r0,r1
000032  d201              BCS      |L2.56|
;;;616            {
;;;617                USBD_SET_PAYLOAD_LEN(EP1, g_usbd_CtrlMaxPktSize);
000034  6a20              LDR      r0,[r4,#0x20]  ; g_usbd_CtrlMaxPktSize
000036  6030              STR      r0,[r6,#0]
                  |L2.56|
;;;618            }
;;;619    
;;;620        }
;;;621    }
000038  bd70              POP      {r4-r6,pc}
;;;622    
                          ENDP

00003a  0000              DCW      0x0000
                  |L2.60|
                          DCD      ||.data||
                  |L2.64|
                          DCD      0x400c0514
                  |L2.68|
                          DCD      0x400c0100

                          AREA ||i.USBD_GetDescriptor||, CODE, READONLY, ALIGN=2

                  USBD_GetDescriptor PROC
;;;179      */
;;;180    void USBD_GetDescriptor(void)
000000  b430              PUSH     {r4,r5}
;;;181    {
;;;182        uint32_t u32Len;
;;;183    
;;;184        u32Len = 0ul;
;;;185        u32Len = g_usbd_SetupPacket[7];
000002  4b2c              LDR      r3,|L3.180|
;;;186        u32Len <<= 8ul;
;;;187        u32Len += g_usbd_SetupPacket[6];
;;;188    
;;;189        switch(g_usbd_SetupPacket[3])
;;;190        {
;;;191        /* Get Device Descriptor */
;;;192        case DESC_DEVICE:
;;;193        {
;;;194            u32Len = USBD_Minimum(u32Len, (uint32_t)LEN_DEVICE);
;;;195            USBD_PrepareCtrlIn((uint8_t *)g_usbd_sInfo->gu8DevDesc, u32Len);
;;;196    
;;;197            break;
;;;198        }
;;;199        /* Get Configuration Descriptor */
;;;200        case DESC_CONFIG:
;;;201        {
;;;202            uint32_t u32TotalLen;
;;;203    
;;;204            u32TotalLen = g_usbd_sInfo->gu8ConfigDesc[3];
;;;205            u32TotalLen = g_usbd_sInfo->gu8ConfigDesc[2] + (u32TotalLen << 8);
;;;206    
;;;207            u32Len = USBD_Minimum(u32Len, u32TotalLen);
;;;208            USBD_PrepareCtrlIn((uint8_t *)g_usbd_sInfo->gu8ConfigDesc, u32Len);
;;;209    
;;;210            break;
;;;211        }
;;;212    
;;;213        /* Get BOS Descriptor */
;;;214        case DESC_BOS:
;;;215        {
;;;216            u32Len = USBD_Minimum(u32Len, LEN_BOS+LEN_BOSCAP);
;;;217            USBD_PrepareCtrlIn((uint8_t *)g_usbd_sInfo->gu8BosDesc, u32Len);
;;;218            break;
;;;219        }
;;;220        /* Get HID Descriptor */
;;;221        case DESC_HID:
;;;222        {
;;;223            /* CV3.0 HID Class Descriptor Test,
;;;224               Need to indicate index of the HID Descriptor within gu8ConfigDescriptor, specifically HID Composite device. */
;;;225            uint32_t u32ConfigDescOffset;   /* u32ConfigDescOffset is configuration descriptor offset (HID descriptor start index) */
;;;226            u32Len = USBD_Minimum(u32Len, LEN_HID);
;;;227            u32ConfigDescOffset = g_usbd_sInfo->gu32ConfigHidDescIdx[g_usbd_SetupPacket[4]];
;;;228            USBD_PrepareCtrlIn((uint8_t *)&g_usbd_sInfo->gu8ConfigDesc[u32ConfigDescOffset], u32Len);
;;;229    
;;;230            break;
;;;231        }
;;;232        /* Get Report Descriptor */
;;;233        case DESC_HID_RPT:
;;;234        {
;;;235            u32Len = USBD_Minimum(u32Len, g_usbd_sInfo->gu32HidReportSize[g_usbd_SetupPacket[4]]);
;;;236            USBD_PrepareCtrlIn((uint8_t *)g_usbd_sInfo->gu8HidReportDesc[g_usbd_SetupPacket[4]], u32Len);
;;;237            break;
;;;238        }
;;;239        /* Get String Descriptor */
;;;240        case DESC_STRING:
;;;241        {
;;;242            /* Get String Descriptor */
;;;243            if(g_usbd_SetupPacket[2] < 4ul)
;;;244            {
;;;245                u32Len = USBD_Minimum(u32Len, g_usbd_sInfo->gu8StringDesc[g_usbd_SetupPacket[2]][0]);
;;;246                USBD_PrepareCtrlIn((uint8_t *)g_usbd_sInfo->gu8StringDesc[g_usbd_SetupPacket[2]], u32Len);
;;;247    
;;;248    
;;;249                break;
;;;250            }
;;;251            else
;;;252            {
;;;253                /* Not support. Reply STALL. */
;;;254                USBD_SET_EP_STALL(EP0);
;;;255                USBD_SET_EP_STALL(EP1);
000004  4d2c              LDR      r5,|L3.184|
000006  4c2c              LDR      r4,|L3.184|
000008  79d8              LDRB     r0,[r3,#7]            ;185  ; g_usbd_SetupPacket
00000a  7999              LDRB     r1,[r3,#6]            ;187  ; g_usbd_SetupPacket
00000c  78da              LDRB     r2,[r3,#3]            ;189  ; g_usbd_SetupPacket
00000e  eb012100          ADD      r1,r1,r0,LSL #8       ;187
000012  f1a30040          SUB      r0,r3,#0x40           ;195
000016  3510              ADDS     r5,r5,#0x10
000018  6bc0              LDR      r0,[r0,#0x3c]         ;195
00001a  2a0f              CMP      r2,#0xf               ;189
00001c  d01c              BEQ      |L3.88|
00001e  dc06              BGT      |L3.46|
000020  2a01              CMP      r2,#1                 ;189
000022  d00b              BEQ      |L3.60|
000024  2a02              CMP      r2,#2                 ;189
000026  d00e              BEQ      |L3.70|
000028  2a03              CMP      r2,#3                 ;189
00002a  d139              BNE      |L3.160|
00002c  e02c              B        |L3.136|
                  |L3.46|
00002e  4b21              LDR      r3,|L3.180|
000030  2a21              CMP      r2,#0x21              ;189
000032  791b              LDRB     r3,[r3,#4]            ;227
000034  d015              BEQ      |L3.98|
000036  2a22              CMP      r2,#0x22              ;189
000038  d132              BNE      |L3.160|
00003a  e01b              B        |L3.116|
                  |L3.60|
00003c  2912              CMP      r1,#0x12              ;194
00003e  d300              BCC      |L3.66|
000040  2112              MOVS     r1,#0x12              ;194
                  |L3.66|
000042  6800              LDR      r0,[r0,#0]            ;195
000044  e029              B        |L3.154|
                  |L3.70|
000046  6840              LDR      r0,[r0,#4]            ;204
000048  78c2              LDRB     r2,[r0,#3]            ;204
00004a  7883              LDRB     r3,[r0,#2]            ;205
00004c  eb032202          ADD      r2,r3,r2,LSL #8       ;205
000050  4291              CMP      r1,r2                 ;207
000052  d322              BCC      |L3.154|
                  |L3.84|
000054  4611              MOV      r1,r2                 ;207
000056  e020              B        |L3.154|
                  |L3.88|
000058  290c              CMP      r1,#0xc               ;216
00005a  d300              BCC      |L3.94|
00005c  210c              MOVS     r1,#0xc               ;216
                  |L3.94|
00005e  6900              LDR      r0,[r0,#0x10]         ;217
000060  e01b              B        |L3.154|
                  |L3.98|
000062  2909              CMP      r1,#9                 ;226
000064  d300              BCC      |L3.104|
000066  2109              MOVS     r1,#9                 ;226
                  |L3.104|
000068  6982              LDR      r2,[r0,#0x18]         ;227
00006a  6840              LDR      r0,[r0,#4]            ;228
00006c  f8522023          LDR      r2,[r2,r3,LSL #2]     ;227
000070  4410              ADD      r0,r0,r2              ;228
000072  e012              B        |L3.154|
                  |L3.116|
000074  6942              LDR      r2,[r0,#0x14]         ;235
000076  f8522023          LDR      r2,[r2,r3,LSL #2]     ;235
00007a  428a              CMP      r2,r1                 ;235
00007c  d800              BHI      |L3.128|
00007e  4611              MOV      r1,r2                 ;235
                  |L3.128|
000080  68c0              LDR      r0,[r0,#0xc]          ;236
000082  f8500023          LDR      r0,[r0,r3,LSL #2]     ;236
000086  e008              B        |L3.154|
                  |L3.136|
000088  789a              LDRB     r2,[r3,#2]            ;243  ; g_usbd_SetupPacket
00008a  2a04              CMP      r2,#4                 ;243
00008c  d208              BCS      |L3.160|
00008e  6880              LDR      r0,[r0,#8]            ;245
000090  f8500022          LDR      r0,[r0,r2,LSL #2]     ;245
000094  7802              LDRB     r2,[r0,#0]            ;245
000096  428a              CMP      r2,r1                 ;245
000098  d9dc              BLS      |L3.84|
                  |L3.154|
00009a  bc30              POP      {r4,r5}               ;246
00009c  f7ffbffe          B.W      USBD_PrepareCtrlIn
                  |L3.160|
;;;256                break;
;;;257            }
;;;258        }
;;;259        default:
;;;260            /* Not support. Reply STALL.*/
;;;261            USBD_SET_EP_STALL(EP0);
0000a0  6820              LDR      r0,[r4,#0]
0000a2  f0400002          ORR      r0,r0,#2
0000a6  6020              STR      r0,[r4,#0]
;;;262            USBD_SET_EP_STALL(EP1);
0000a8  6828              LDR      r0,[r5,#0]
0000aa  f0400002          ORR      r0,r0,#2
0000ae  6028              STR      r0,[r5,#0]
;;;263            break;
;;;264        }
;;;265    }
0000b0  bc30              POP      {r4,r5}
0000b2  4770              BX       lr
;;;266    
                          ENDP

                  |L3.180|
                          DCD      ||.data||+0x40
                  |L3.184|
                          DCD      0x400c050c

                          AREA ||i.USBD_GetSetupPacket||, CODE, READONLY, ALIGN=2

                  USBD_GetSetupPacket PROC
;;;115      */
;;;116    void USBD_GetSetupPacket(uint8_t *buf)
000000  2208              MOVS     r2,#8
;;;117    {
;;;118        USBD_MemCopy(buf, g_usbd_SetupPacket, 8ul);
000002  4901              LDR      r1,|L4.8|
000004  f7ffbffe          B.W      USBD_MemCopy
;;;119    }
;;;120    
                          ENDP

                  |L4.8|
                          DCD      ||.data||+0x40

                          AREA ||i.USBD_LockEpStall||, CODE, READONLY, ALIGN=2

                  USBD_LockEpStall PROC
;;;694     */
;;;695    void USBD_LockEpStall(uint32_t u32EpBitmap)
000000  4901              LDR      r1,|L5.8|
;;;696    {
;;;697        g_u32EpStallLock = u32EpBitmap;
000002  6388              STR      r0,[r1,#0x38]  ; g_u32EpStallLock
;;;698    }
000004  4770              BX       lr
;;;699    
                          ENDP

000006  0000              DCW      0x0000
                  |L5.8|
                          DCD      ||.data||

                          AREA ||i.USBD_MemCopy||, CODE, READONLY, ALIGN=1

                  USBD_MemCopy PROC
;;;548      */
;;;549    __STATIC_INLINE void USBD_MemCopy(uint8_t dest[], uint8_t src[], uint32_t size)
000000  b518              PUSH     {r3,r4,lr}
;;;550    {
;;;551        uint32_t volatile i=0ul;
000002  2300              MOVS     r3,#0
                  |L6.4|
000004  9300              STR      r3,[sp,#0]
000006  1e52              SUBS     r2,r2,#1
000008  d306              BCC      |L6.24|
;;;552    
;;;553        while(size--)
;;;554        {
;;;555            dest[i] = src[i];
00000a  9b00              LDR      r3,[sp,#0]
00000c  9c00              LDR      r4,[sp,#0]
00000e  5ccb              LDRB     r3,[r1,r3]
000010  5503              STRB     r3,[r0,r4]
;;;556            i++;
000012  9b00              LDR      r3,[sp,#0]
000014  1c5b              ADDS     r3,r3,#1
000016  e7f5              B        |L6.4|
                  |L6.24|
;;;557        }
;;;558    }
000018  bd18              POP      {r3,r4,pc}
;;;559    
                          ENDP


                          AREA ||i.USBD_Open||, CODE, READONLY, ALIGN=2

                  USBD_Open PROC
;;;68       */
;;;69     void USBD_Open(const S_USBD_INFO_T *param, CLASS_REQ pfnClassReq, SET_INTERFACE_REQ pfnSetInterface)
000000  4b08              LDR      r3,|L7.36|
;;;70     {
;;;71         g_usbd_sInfo = param;
000002  63d8              STR      r0,[r3,#0x3c]  ; g_usbd_sInfo
000004  e9c3120b          STRD     r1,r2,[r3,#0x2c]
;;;72         g_usbd_pfnClassRequest = pfnClassReq;
;;;73         g_usbd_pfnSetInterface = pfnSetInterface;
;;;74     
;;;75         /* get EP0 maximum packet size */
;;;76         g_usbd_CtrlMaxPktSize = g_usbd_sInfo->gu8DevDesc[7];
000008  6800              LDR      r0,[r0,#0]
00000a  79c0              LDRB     r0,[r0,#7]
00000c  6218              STR      r0,[r3,#0x20]  ; g_usbd_CtrlMaxPktSize
;;;77     
;;;78         /* Initial USB engine */
;;;79         USBD->ATTR = 0x6D0ul;
00000e  4806              LDR      r0,|L7.40|
000010  f44f61da          MOV      r1,#0x6d0
000014  6101              STR      r1,[r0,#0x10]
;;;80         /* Force SE0 */
;;;81         USBD_SET_SE0();
000016  f8d01090          LDR      r1,[r0,#0x90]
00001a  f0410101          ORR      r1,r1,#1
00001e  f8c01090          STR      r1,[r0,#0x90]
;;;82     }
000022  4770              BX       lr
;;;83     
                          ENDP

                  |L7.36|
                          DCD      ||.data||
                  |L7.40|
                          DCD      0x400c0000

                          AREA ||i.USBD_PrepareCtrlIn||, CODE, READONLY, ALIGN=2

                  USBD_PrepareCtrlIn PROC
;;;485      */
;;;486    void USBD_PrepareCtrlIn(uint8_t pu8Buf[], uint32_t u32Size)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;487    {
;;;488        uint32_t addr;
;;;489        if(u32Size > g_usbd_CtrlMaxPktSize)
000004  4c17              LDR      r4,|L8.100|
000006  460d              MOV      r5,r1                 ;487
000008  6a27              LDR      r7,[r4,#0x20]  ; g_usbd_CtrlMaxPktSize
;;;490        {
;;;491            /* Data size > MXPLD */
;;;492            g_usbd_CtrlInPointer = pu8Buf + g_usbd_CtrlMaxPktSize;
;;;493            g_usbd_CtrlInSize = u32Size - g_usbd_CtrlMaxPktSize;
;;;494            USBD_SET_DATA1(EP0);
00000a  4917              LDR      r1,|L8.104|
;;;495            addr = USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0);
00000c  4a16              LDR      r2,|L8.104|
00000e  4b17              LDR      r3,|L8.108|
000010  3a08              SUBS     r2,r2,#8
;;;496            USBD_MemCopy((uint8_t *)addr, pu8Buf, g_usbd_CtrlMaxPktSize);
;;;497            USBD_SET_PAYLOAD_LEN(EP0, g_usbd_CtrlMaxPktSize);
000012  1f0e              SUBS     r6,r1,#4
000014  42bd              CMP      r5,r7                 ;489
000016  d914              BLS      |L8.66|
000018  6a27              LDR      r7,[r4,#0x20]         ;492  ; g_usbd_CtrlMaxPktSize
00001a  4407              ADD      r7,r7,r0              ;492
00001c  6067              STR      r7,[r4,#4]            ;493  ; g_usbd_CtrlInPointer
00001e  6a27              LDR      r7,[r4,#0x20]         ;493  ; g_usbd_CtrlMaxPktSize
000020  1bed              SUBS     r5,r5,r7              ;493
000022  60e5              STR      r5,[r4,#0xc]          ;493  ; g_usbd_CtrlInSize
000024  680d              LDR      r5,[r1,#0]            ;494
000026  f0450580          ORR      r5,r5,#0x80           ;494
00002a  600d              STR      r5,[r1,#0]            ;494
00002c  6811              LDR      r1,[r2,#0]            ;495
00002e  6a22              LDR      r2,[r4,#0x20]         ;496  ; g_usbd_CtrlMaxPktSize
000030  440b              ADD      r3,r3,r1              ;495
000032  4601              MOV      r1,r0                 ;496
000034  4618              MOV      r0,r3                 ;496
000036  f7fffffe          BL       USBD_MemCopy
00003a  6a20              LDR      r0,[r4,#0x20]  ; g_usbd_CtrlMaxPktSize
00003c  6030              STR      r0,[r6,#0]
                  |L8.62|
;;;498        }
;;;499        else
;;;500        {
;;;501            /* Data size <= MXPLD */
;;;502            g_usbd_CtrlInPointer = 0;
;;;503            g_usbd_CtrlInSize = 0ul;
;;;504            USBD_SET_DATA1(EP0);
;;;505            addr = USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0);
;;;506            USBD_MemCopy((uint8_t *)addr, pu8Buf, u32Size);
;;;507            USBD_SET_PAYLOAD_LEN(EP0, u32Size);
;;;508        }
;;;509    }
00003e  e8bd81f0          POP      {r4-r8,pc}
                  |L8.66|
000042  2700              MOVS     r7,#0                 ;502
000044  6067              STR      r7,[r4,#4]            ;503  ; g_usbd_CtrlInPointer
000046  60e7              STR      r7,[r4,#0xc]          ;503  ; g_usbd_CtrlInSize
000048  680c              LDR      r4,[r1,#0]            ;504
00004a  f0440480          ORR      r4,r4,#0x80           ;504
00004e  600c              STR      r4,[r1,#0]            ;504
000050  6811              LDR      r1,[r2,#0]            ;505
000052  462a              MOV      r2,r5                 ;506
000054  440b              ADD      r3,r3,r1              ;505
000056  4601              MOV      r1,r0                 ;506
000058  4618              MOV      r0,r3                 ;506
00005a  f7fffffe          BL       USBD_MemCopy
00005e  6035              STR      r5,[r6,#0]            ;507
000060  e7ed              B        |L8.62|
;;;510    
                          ENDP

000062  0000              DCW      0x0000
                  |L8.100|
                          DCD      ||.data||
                  |L8.104|
                          DCD      0x400c0508
                  |L8.108|
                          DCD      0x400c0100

                          AREA ||i.USBD_PrepareCtrlOut||, CODE, READONLY, ALIGN=2

                  USBD_PrepareCtrlOut PROC
;;;583      */
;;;584    void USBD_PrepareCtrlOut(uint8_t *pu8Buf, uint32_t u32Size)
000000  4a04              LDR      r2,|L9.20|
;;;585    {
;;;586        g_usbd_CtrlOutPointer = pu8Buf;
;;;587        g_usbd_CtrlOutSize = 0ul;
000002  6090              STR      r0,[r2,#8]  ; g_usbd_CtrlOutPointer
000004  2000              MOVS     r0,#0
000006  6110              STR      r0,[r2,#0x10]  ; g_usbd_CtrlOutSize
;;;588        g_usbd_CtrlOutSizeLimit = u32Size;
000008  6151              STR      r1,[r2,#0x14]  ; g_usbd_CtrlOutSizeLimit
;;;589        USBD_SET_PAYLOAD_LEN(EP1, g_usbd_CtrlMaxPktSize);
00000a  6a10              LDR      r0,[r2,#0x20]  ; g_usbd_CtrlMaxPktSize
00000c  4902              LDR      r1,|L9.24|
00000e  6008              STR      r0,[r1,#0]
;;;590    }
000010  4770              BX       lr
;;;591    
                          ENDP

000012  0000              DCW      0x0000
                  |L9.20|
                          DCD      ||.data||
                  |L9.24|
                          DCD      0x400c0514

                          AREA ||i.USBD_ProcessSetupPacket||, CODE, READONLY, ALIGN=2

                  USBD_ProcessSetupPacket PROC
;;;130      */
;;;131    void USBD_ProcessSetupPacket(void)
000000  b510              PUSH     {r4,lr}
;;;132    {
;;;133        /* Get SETUP packet from USB buffer */
;;;134        USBD_MemCopy(g_usbd_SetupPacket, (uint8_t *)USBD_BUF_BASE, 8ul);
000002  2208              MOVS     r2,#8
000004  4913              LDR      r1,|L10.84|
000006  4814              LDR      r0,|L10.88|
000008  f7fffffe          BL       USBD_MemCopy
;;;135    
;;;136        /* Check the request type */
;;;137        switch(g_usbd_SetupPacket[0] & 0x60ul)
00000c  4812              LDR      r0,|L10.88|
00000e  7800              LDRB     r0,[r0,#0]  ; g_usbd_SetupPacket
000010  f0100060          ANDS     r0,r0,#0x60
000014  d011              BEQ      |L10.58|
;;;138        {
;;;139        case REQ_STANDARD:
;;;140        {
;;;141            USBD_StandardRequest();
;;;142            break;
;;;143        }
;;;144        case REQ_CLASS:
;;;145        {
;;;146            if(g_usbd_pfnClassRequest != NULL)
000016  4910              LDR      r1,|L10.88|
000018  3940              SUBS     r1,r1,#0x40
00001a  2820              CMP      r0,#0x20              ;137
00001c  d011              BEQ      |L10.66|
00001e  2840              CMP      r0,#0x40              ;137
000020  d011              BEQ      |L10.70|
;;;147            {
;;;148                g_usbd_pfnClassRequest();
;;;149            }
;;;150            break;
;;;151        }
;;;152        case REQ_VENDOR:
;;;153        {
;;;154            if(g_usbd_pfnVendorRequest != NULL)
;;;155            {
;;;156                g_usbd_pfnVendorRequest();
;;;157            }
;;;158            break;
;;;159        }
;;;160        default:
;;;161        {
;;;162            /* Setup error, stall the device */
;;;163            USBD_SET_EP_STALL(EP0);
000022  480e              LDR      r0,|L10.92|
000024  6801              LDR      r1,[r0,#0]
000026  f0410102          ORR      r1,r1,#2
00002a  6001              STR      r1,[r0,#0]
;;;164            USBD_SET_EP_STALL(EP1);
00002c  480b              LDR      r0,|L10.92|
00002e  3010              ADDS     r0,r0,#0x10
000030  6801              LDR      r1,[r0,#0]
000032  f0410102          ORR      r1,r1,#2
000036  6001              STR      r1,[r0,#0]
                  |L10.56|
;;;165            break;
;;;166        }
;;;167        }
;;;168    }
000038  bd10              POP      {r4,pc}
                  |L10.58|
00003a  e8bd4010          POP      {r4,lr}               ;141
00003e  f7ffbffe          B.W      USBD_StandardRequest
                  |L10.66|
000042  6ac8              LDR      r0,[r1,#0x2c]         ;146  ; g_usbd_pfnClassRequest
000044  e000              B        |L10.72|
                  |L10.70|
000046  6a88              LDR      r0,[r1,#0x28]         ;154  ; g_usbd_pfnVendorRequest
                  |L10.72|
000048  2800              CMP      r0,#0                 ;154
00004a  d0f5              BEQ      |L10.56|
00004c  e8bd4010          POP      {r4,lr}               ;156
000050  4700              BX       r0                    ;156
;;;169    
                          ENDP

000052  0000              DCW      0x0000
                  |L10.84|
                          DCD      0x400c0100
                  |L10.88|
                          DCD      ||.data||+0x40
                  |L10.92|
                          DCD      0x400c050c

                          AREA ||i.USBD_SetConfigCallback||, CODE, READONLY, ALIGN=2

                  USBD_SetConfigCallback PROC
;;;678     */
;;;679    void USBD_SetConfigCallback(SET_CONFIG_CB pfnSetConfigCallback)
000000  4901              LDR      r1,|L11.8|
;;;680    {
;;;681        g_usbd_pfnSetConfigCallback = pfnSetConfigCallback;
000002  6348              STR      r0,[r1,#0x34]  ; g_usbd_pfnSetConfigCallback
;;;682    }
000004  4770              BX       lr
;;;683    
                          ENDP

000006  0000              DCW      0x0000
                  |L11.8|
                          DCD      ||.data||

                          AREA ||i.USBD_SetVendorRequest||, CODE, READONLY, ALIGN=2

                  USBD_SetVendorRequest PROC
;;;664     */
;;;665    void USBD_SetVendorRequest(VENDOR_REQ pfnVendorReq)
000000  4901              LDR      r1,|L12.8|
;;;666    {
;;;667        g_usbd_pfnVendorRequest = pfnVendorReq;
000002  6288              STR      r0,[r1,#0x28]  ; g_usbd_pfnVendorRequest
;;;668    }
000004  4770              BX       lr
;;;669    
                          ENDP

000006  0000              DCW      0x0000
                  |L12.8|
                          DCD      ||.data||

                          AREA ||i.USBD_StandardRequest||, CODE, READONLY, ALIGN=2

                  USBD_StandardRequest PROC
;;;276      */
;;;277    void USBD_StandardRequest(void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;278    {
;;;279        uint32_t addr;
;;;280        /* clear global variables for new request */
;;;281        g_usbd_CtrlInPointer = 0;
000004  497f              LDR      r1,|L13.516|
000006  2500              MOVS     r5,#0
;;;282        g_usbd_CtrlInSize = 0ul;
000008  604d              STR      r5,[r1,#4]  ; g_usbd_CtrlInPointer
00000a  60cd              STR      r5,[r1,#0xc]  ; g_usbd_CtrlInSize
;;;283    
;;;284        if((g_usbd_SetupPacket[0] & 0x80ul) == 0x80ul)    /* request data transfer direction */
00000c  f1010340          ADD      r3,r1,#0x40
000010  4698              MOV      r8,r3
000012  7818              LDRB     r0,[r3,#0]  ; g_usbd_SetupPacket
;;;285        {
;;;286            /* Device to host */
;;;287            switch(g_usbd_SetupPacket[1])
;;;288            {
;;;289            case GET_CONFIGURATION:
;;;290            {
;;;291                /* Return current configuration setting */
;;;292                /* Data stage */
;;;293                addr = USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0);
;;;294                M8(addr) = (uint8_t)g_usbd_UsbConfig;
;;;295                USBD_SET_DATA1(EP0);
;;;296                USBD_SET_PAYLOAD_LEN(EP0, 1ul);
;;;297                /* Status stage */
;;;298                USBD_PrepareCtrlOut(0, 0ul);
;;;299                break;
;;;300            }
;;;301            case GET_DESCRIPTOR:
;;;302            {
;;;303                USBD_GetDescriptor();
;;;304                USBD_PrepareCtrlOut(0, 0ul); /* For status stage */
;;;305                break;
;;;306            }
;;;307            case GET_INTERFACE:
;;;308            {
;;;309                /* Return current interface setting */
;;;310                /* Data stage */
;;;311                addr = USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0);
;;;312                M8(addr) = (uint8_t)g_usbd_UsbAltInterface;
;;;313                USBD_SET_DATA1(EP0);
;;;314                USBD_SET_PAYLOAD_LEN(EP0, 1ul);
;;;315                /* Status stage */
;;;316                USBD_PrepareCtrlOut(0, 0ul);
;;;317                break;
;;;318            }
;;;319            case GET_STATUS:
;;;320            {
;;;321                /* Device */
;;;322                if(g_usbd_SetupPacket[0] == 0x80ul)
;;;323                {
;;;324                    uint8_t u8Tmp;
;;;325    
;;;326                    u8Tmp = (uint8_t)0ul;
;;;327                    if ((g_usbd_sInfo->gu8ConfigDesc[7] & 0x40ul) == 0x40ul)
;;;328                    {
;;;329                        u8Tmp |= (uint8_t)1ul; /* Self-Powered/Bus-Powered.*/
;;;330                    }
;;;331                    if ((g_usbd_sInfo->gu8ConfigDesc[7] & 0x20ul) == 0x20ul)
;;;332                    {
;;;333                        u8Tmp |= (uint8_t)(g_usbd_RemoteWakeupEn << 1ul); /* Remote wake up */
;;;334                    }
;;;335    
;;;336                    addr = USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0);
;;;337                    M8(addr) = u8Tmp;
;;;338    
;;;339                }
;;;340                /* Interface */
;;;341                else if(g_usbd_SetupPacket[0] == 0x81ul)
;;;342                {
;;;343                    addr = USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0);
;;;344                    M8(addr) = (uint8_t)0ul;
;;;345                }
;;;346                /* Endpoint */
;;;347                else if(g_usbd_SetupPacket[0] == 0x82ul)
;;;348                {
;;;349                    uint8_t ep = (uint8_t)(g_usbd_SetupPacket[4] & 0xFul);
000014  f8984004          LDRB     r4,[r8,#4]
000018  4e7b              LDR      r6,|L13.520|
00001a  f8dfc1f0          LDR      r12,|L13.524|
;;;350                    addr = USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0);
;;;351                    M8(addr) = (uint8_t)(USBD_GetStall(ep) ? 1ul : 0ul);
;;;352                }
;;;353    
;;;354                addr = USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0) + 1ul;
;;;355                M8(addr) = (uint8_t)0ul;
;;;356                /* Data stage */
;;;357                USBD_SET_DATA1(EP0);
;;;358                USBD_SET_PAYLOAD_LEN(EP0, 2ul);
;;;359                /* Status stage */
;;;360                USBD_PrepareCtrlOut(0, 0ul);
;;;361                break;
;;;362            }
;;;363            default:
;;;364            {
;;;365                /* Setup error, stall the device */
;;;366                USBD_SET_EP_STALL(EP0);
;;;367                USBD_SET_EP_STALL(EP1);
00001e  f8dfa1f0          LDR      r10,|L13.528|
000022  f004070f          AND      r7,r4,#0xf            ;349
000026  f8988001          LDRB     r8,[r8,#1]            ;287
00002a  0602              LSLS     r2,r0,#24             ;284
00002c  f04f0901          MOV      r9,#1                 ;296
000030  f1060404          ADD      r4,r6,#4              ;295
000034  d571              BPL      |L13.282|
000036  4a77              LDR      r2,|L13.532|
000038  1f33              SUBS     r3,r6,#4              ;293
00003a  f1b80f00          CMP      r8,#0                 ;287
00003e  d01a              BEQ      |L13.118|
000040  f1b80f06          CMP      r8,#6                 ;287
000044  d00a              BEQ      |L13.92|
000046  f1b80f08          CMP      r8,#8                 ;287
00004a  d003              BEQ      |L13.84|
00004c  f1b80f0a          CMP      r8,#0xa               ;287
000050  d154              BNE      |L13.252|
000052  e006              B        |L13.98|
                  |L13.84|
000054  6818              LDR      r0,[r3,#0]            ;293
000056  69c9              LDR      r1,[r1,#0x1c]         ;294  ; g_usbd_UsbConfig
000058  4410              ADD      r0,r0,r2              ;293
00005a  e005              B        |L13.104|
                  |L13.92|
00005c  f7fffffe          BL       USBD_GetDescriptor
000060  e046              B        |L13.240|
                  |L13.98|
000062  6818              LDR      r0,[r3,#0]            ;311
000064  6a49              LDR      r1,[r1,#0x24]         ;312  ; g_usbd_UsbAltInterface
000066  4410              ADD      r0,r0,r2              ;311
                  |L13.104|
000068  7001              STRB     r1,[r0,#0]            ;294
00006a  6820              LDR      r0,[r4,#0]            ;295
00006c  f0400080          ORR      r0,r0,#0x80           ;295
000070  6020              STR      r0,[r4,#0]            ;295
000072  4648              MOV      r0,r9                 ;296
000074  e03b              B        |L13.238|
                  |L13.118|
000076  2880              CMP      r0,#0x80              ;322
000078  d004              BEQ      |L13.132|
00007a  2881              CMP      r0,#0x81              ;341
00007c  d013              BEQ      |L13.166|
00007e  2882              CMP      r0,#0x82              ;347
000080  d014              BEQ      |L13.172|
000082  e02b              B        |L13.220|
                  |L13.132|
000084  6bcf              LDR      r7,[r1,#0x3c]         ;327  ; g_usbd_sInfo
000086  2000              MOVS     r0,#0                 ;326
000088  687f              LDR      r7,[r7,#4]            ;327
00008a  79ff              LDRB     r7,[r7,#7]            ;327
00008c  ea5f6c47          LSLS     r12,r7,#25            ;327
000090  d500              BPL      |L13.148|
000092  2001              MOVS     r0,#1                 ;329
                  |L13.148|
000094  06bf              LSLS     r7,r7,#26             ;331
000096  d503              BPL      |L13.160|
000098  7809              LDRB     r1,[r1,#0]            ;333  ; g_usbd_RemoteWakeupEn
00009a  0649              LSLS     r1,r1,#25             ;333
00009c  ea406011          ORR      r0,r0,r1,LSR #24      ;333
                  |L13.160|
0000a0  6819              LDR      r1,[r3,#0]            ;336
0000a2  5488              STRB     r0,[r1,r2]            ;337
0000a4  e01a              B        |L13.220|
                  |L13.166|
0000a6  6818              LDR      r0,[r3,#0]            ;343
0000a8  5485              STRB     r5,[r0,r2]            ;344
0000aa  e017              B        |L13.220|
                  |L13.172|
0000ac  6818              LDR      r0,[r3,#0]            ;350
0000ae  eb000802          ADD      r8,r0,r2              ;350
0000b2  2000              MOVS     r0,#0                 ;350
                  |L13.180|
0000b4  eb041100          ADD      r1,r4,r0,LSL #4       ;350
0000b8  680a              LDR      r2,[r1,#0]            ;350
0000ba  f002020f          AND      r2,r2,#0xf            ;350
0000be  42ba              CMP      r2,r7                 ;350
0000c0  d102              BNE      |L13.200|
0000c2  eb0c1100          ADD      r1,r12,r0,LSL #4      ;350
0000c6  e002              B        |L13.206|
                  |L13.200|
0000c8  1c40              ADDS     r0,r0,#1              ;350
0000ca  280c              CMP      r0,#0xc               ;350
0000cc  d3f2              BCC      |L13.180|
                  |L13.206|
0000ce  6808              LDR      r0,[r1,#0]            ;350
0000d0  f0100002          ANDS     r0,r0,#2              ;350
0000d4  d000              BEQ      |L13.216|
0000d6  2001              MOVS     r0,#1                 ;351
                  |L13.216|
0000d8  f8880000          STRB     r0,[r8,#0]            ;351
                  |L13.220|
0000dc  6818              LDR      r0,[r3,#0]            ;354
0000de  494d              LDR      r1,|L13.532|
0000e0  1c49              ADDS     r1,r1,#1              ;354
0000e2  5445              STRB     r5,[r0,r1]            ;355
0000e4  6820              LDR      r0,[r4,#0]            ;357
0000e6  f0400080          ORR      r0,r0,#0x80           ;357
0000ea  6020              STR      r0,[r4,#0]            ;357
0000ec  2002              MOVS     r0,#2                 ;358
                  |L13.238|
0000ee  6030              STR      r0,[r6,#0]            ;358
                  |L13.240|
0000f0  e8bd47f0          POP      {r4-r10,lr}           ;360
0000f4  2100              MOVS     r1,#0                 ;360
0000f6  4608              MOV      r0,r1                 ;360
0000f8  f7ffbffe          B.W      USBD_PrepareCtrlOut
                  |L13.252|
0000fc  f8dc0000          LDR      r0,[r12,#0]           ;366
000100  f0400002          ORR      r0,r0,#2              ;366
000104  f8cc0000          STR      r0,[r12,#0]           ;366
000108  f8da1000          LDR      r1,[r10,#0]
00010c  f0410102          ORR      r1,r1,#2
000110  f8ca1000          STR      r1,[r10,#0]
                  |L13.276|
;;;368                break;
;;;369            }
;;;370            }
;;;371        }
;;;372        else
;;;373        {
;;;374            /* Host to device */
;;;375            switch(g_usbd_SetupPacket[1])
;;;376            {
;;;377            case CLEAR_FEATURE:
;;;378            {
;;;379                if(g_usbd_SetupPacket[2] == FEATURE_ENDPOINT_HALT)
;;;380                {
;;;381                    uint32_t epNum, i;
;;;382    
;;;383                    /* EP number stall is not allow to be clear in MSC class "Error Recovery Test".
;;;384                       a flag: g_u32EpStallLock is added to support it */
;;;385                    epNum = (uint8_t)(g_usbd_SetupPacket[4] & 0xFul);
;;;386                    for(i = 0ul; i < USBD_MAX_EP; i++)
;;;387                    {
;;;388                        if(((USBD->EP[i].CFG & 0xFul) == epNum) && ((g_u32EpStallLock & (1ul << i)) == 0ul))
;;;389                        {
;;;390                            USBD->EP[i].CFGP &= ~USBD_CFGP_SSTALL_Msk;
;;;391                            USBD->EP[i].CFG &= ~USBD_CFG_DSQSYNC_Msk;
;;;392                        }
;;;393                    }
;;;394                }
;;;395                else if(g_usbd_SetupPacket[2] == FEATURE_DEVICE_REMOTE_WAKEUP)
;;;396                {
;;;397                    g_usbd_RemoteWakeupEn = (uint8_t)0;
;;;398                }
;;;399    
;;;400                /* Status stage */
;;;401                USBD_SET_DATA1(EP0);
;;;402                USBD_SET_PAYLOAD_LEN(EP0, 0ul);
;;;403                break;
;;;404            }
;;;405            case SET_ADDRESS:
;;;406            {
;;;407                g_usbd_UsbAddr = g_usbd_SetupPacket[2];
;;;408                /* Status Stage */
;;;409                USBD_SET_DATA1(EP0);
;;;410                USBD_SET_PAYLOAD_LEN(EP0, 0ul);
;;;411    
;;;412                break;
;;;413            }
;;;414            case SET_CONFIGURATION:
;;;415            {
;;;416                g_usbd_UsbConfig = g_usbd_SetupPacket[2];
;;;417    
;;;418                if(g_usbd_pfnSetConfigCallback)
;;;419                {
;;;420                    g_usbd_pfnSetConfigCallback();
;;;421                }
;;;422    
;;;423                /* Status stage */
;;;424                USBD_SET_DATA1(EP0);
;;;425                USBD_SET_PAYLOAD_LEN(EP0, 0ul);
;;;426                break;
;;;427            }
;;;428            case SET_FEATURE:
;;;429            {
;;;430                if( (g_usbd_SetupPacket[0] & 0xFul) == 0ul )   /* 0: device */
;;;431                {
;;;432                    if((g_usbd_SetupPacket[2] == 3ul) && (g_usbd_SetupPacket[3] == 0ul))   /* 3: HNP enable */
;;;433                    {
;;;434                        OTG->CTL |= (OTG_CTL_HNPREQEN_Msk | OTG_CTL_BUSREQ_Msk);
;;;435                    }
;;;436                }
;;;437                if(g_usbd_SetupPacket[2] == FEATURE_ENDPOINT_HALT)
;;;438                {
;;;439                    USBD_SetStall((uint8_t)(g_usbd_SetupPacket[4] & 0xFul));
;;;440                }
;;;441                else if(g_usbd_SetupPacket[2] == FEATURE_DEVICE_REMOTE_WAKEUP)
;;;442                {
;;;443                    g_usbd_RemoteWakeupEn = (uint8_t)1ul;
;;;444                }
;;;445    
;;;446                /* Status stage */
;;;447                USBD_SET_DATA1(EP0);
;;;448                USBD_SET_PAYLOAD_LEN(EP0, 0ul);
;;;449    
;;;450                break;
;;;451            }
;;;452            case SET_INTERFACE:
;;;453            {
;;;454                g_usbd_UsbAltInterface = g_usbd_SetupPacket[2];
;;;455                if(g_usbd_pfnSetInterface != NULL)
;;;456                {
;;;457                    g_usbd_pfnSetInterface(g_usbd_UsbAltInterface);
;;;458                }
;;;459                /* Status stage */
;;;460                USBD_SET_DATA1(EP0);
;;;461                USBD_SET_PAYLOAD_LEN(EP0, 0ul);
;;;462                break;
;;;463            }
;;;464            default:
;;;465            {
;;;466                /* Setup error, stall the device */
;;;467                USBD_SET_EP_STALL(EP0);
;;;468                USBD_SET_EP_STALL(EP1);
;;;469                break;
;;;470            }
;;;471            }
;;;472        }
;;;473    }
000114  e8bd87f0          POP      {r4-r10,pc}
000118  e7ff              B        |L13.282|
                  |L13.282|
00011a  4a3a              LDR      r2,|L13.516|
00011c  3240              ADDS     r2,r2,#0x40           ;284
00011e  f1b80f05          CMP      r8,#5                 ;375
000122  7892              LDRB     r2,[r2,#2]            ;379
000124  d042              BEQ      |L13.428|
000126  dc08              BGT      |L13.314|
000128  f1b80f01          CMP      r8,#1                 ;375
00012c  d011              BEQ      |L13.338|
00012e  f1b80f03          CMP      r8,#3                 ;375
000132  d1e3              BNE      |L13.252|
000134  0700              LSLS     r0,r0,#28             ;430
000136  d041              BEQ      |L13.444|
000138  e042              B        |L13.448|
                  |L13.314|
00013a  f1b80f09          CMP      r8,#9                 ;375
00013e  d037              BEQ      |L13.432|
000140  f1b80f0b          CMP      r8,#0xb               ;375
000144  d1da              BNE      |L13.252|
000146  624a              STR      r2,[r1,#0x24]         ;454  ; g_usbd_UsbAltInterface
000148  6b0a              LDR      r2,[r1,#0x30]         ;455  ; g_usbd_pfnSetInterface
00014a  b33a              CBZ      r2,|L13.412|
00014c  6a48              LDR      r0,[r1,#0x24]         ;457  ; g_usbd_UsbAltInterface
00014e  4790              BLX      r2                    ;457
000150  e026              B        |L13.416|
                  |L13.338|
000152  b112              CBZ      r2,|L13.346|
000154  2a01              CMP      r2,#1                 ;395
000156  d022              BEQ      |L13.414|
000158  e022              B        |L13.416|
                  |L13.346|
00015a  f8dfc0bc          LDR      r12,|L13.536|
00015e  6b8a              LDR      r2,[r1,#0x38]         ;388
000160  2000              MOVS     r0,#0                 ;386
000162  464b              MOV      r3,r9                 ;296
                  |L13.356|
000164  eb0c1100          ADD      r1,r12,r0,LSL #4      ;388
000168  f8d18508          LDR      r8,[r1,#0x508]        ;388
00016c  f008080f          AND      r8,r8,#0xf            ;388
000170  45b8              CMP      r8,r7                 ;388
000172  d110              BNE      |L13.406|
000174  fa03f800          LSL      r8,r3,r0              ;388
000178  ea180f02          TST      r8,r2                 ;388
00017c  d10b              BNE      |L13.406|
00017e  f8d1850c          LDR      r8,[r1,#0x50c]        ;390
000182  f0280802          BIC      r8,r8,#2              ;390
000186  f8c1850c          STR      r8,[r1,#0x50c]        ;390
00018a  f8d18508          LDR      r8,[r1,#0x508]        ;391
00018e  f0280880          BIC      r8,r8,#0x80           ;391
000192  f8c18508          STR      r8,[r1,#0x508]        ;391
                  |L13.406|
000196  1c40              ADDS     r0,r0,#1              ;391
000198  280c              CMP      r0,#0xc               ;386
00019a  d3e3              BCC      |L13.356|
                  |L13.412|
00019c  e000              B        |L13.416|
                  |L13.414|
00019e  700d              STRB     r5,[r1,#0]            ;397
                  |L13.416|
0001a0  6820              LDR      r0,[r4,#0]            ;401
0001a2  f0400080          ORR      r0,r0,#0x80           ;401
0001a6  6020              STR      r0,[r4,#0]            ;401
0001a8  6035              STR      r5,[r6,#0]            ;402
0001aa  e7b3              B        |L13.276|
                  |L13.428|
0001ac  618a              STR      r2,[r1,#0x18]         ;407  ; g_usbd_UsbAddr
0001ae  e7f7              B        |L13.416|
                  |L13.432|
0001b0  61ca              STR      r2,[r1,#0x1c]         ;416  ; g_usbd_UsbConfig
0001b2  6b48              LDR      r0,[r1,#0x34]         ;418  ; g_usbd_pfnSetConfigCallback
0001b4  2800              CMP      r0,#0                 ;418
0001b6  d0f3              BEQ      |L13.416|
0001b8  4780              BLX      r0                    ;420
0001ba  e7f1              B        |L13.416|
                  |L13.444|
0001bc  2a03              CMP      r2,#3                 ;432
0001be  d005              BEQ      |L13.460|
                  |L13.448|
0001c0  b162              CBZ      r2,|L13.476|
0001c2  2a01              CMP      r2,#1                 ;441
0001c4  d1ec              BNE      |L13.416|
0001c6  f8819000          STRB     r9,[r1,#0]            ;443
0001ca  e7e9              B        |L13.416|
                  |L13.460|
0001cc  78d8              LDRB     r0,[r3,#3]            ;432  ; g_usbd_SetupPacket
0001ce  2800              CMP      r0,#0                 ;432
0001d0  d1e6              BNE      |L13.416|
0001d2  4812              LDR      r0,|L13.540|
0001d4  6801              LDR      r1,[r0,#0]            ;434
0001d6  f0410106          ORR      r1,r1,#6              ;434
0001da  e00c              B        |L13.502|
                  |L13.476|
0001dc  2000              MOVS     r0,#0                 ;434
                  |L13.478|
0001de  eb041100          ADD      r1,r4,r0,LSL #4       ;434
0001e2  6809              LDR      r1,[r1,#0]            ;434
0001e4  f001010f          AND      r1,r1,#0xf            ;434
0001e8  42b9              CMP      r1,r7                 ;434
0001ea  d106              BNE      |L13.506|
0001ec  eb0c1000          ADD      r0,r12,r0,LSL #4      ;434
0001f0  6801              LDR      r1,[r0,#0]            ;434
0001f2  f0410102          ORR      r1,r1,#2              ;434
                  |L13.502|
0001f6  6001              STR      r1,[r0,#0]            ;434
0001f8  e7d2              B        |L13.416|
                  |L13.506|
0001fa  1c40              ADDS     r0,r0,#1              ;434
0001fc  280c              CMP      r0,#0xc               ;434
0001fe  d3ee              BCC      |L13.478|
000200  e7ce              B        |L13.416|
;;;474    
                          ENDP

000202  0000              DCW      0x0000
                  |L13.516|
                          DCD      ||.data||
                  |L13.520|
                          DCD      0x400c0504
                  |L13.524|
                          DCD      0x400c050c
                  |L13.528|
                          DCD      0x400c051c
                  |L13.532|
                          DCD      0x400c0100
                  |L13.536|
                          DCD      0x400c0000
                  |L13.540|
                          DCD      0x4004d000

                          AREA ||i.USBD_Start||, CODE, READONLY, ALIGN=2

                  USBD_Start PROC
;;;92       */
;;;93     void USBD_Start(void)
000000  4808              LDR      r0,|L14.36|
;;;94     {
;;;95         /* Disable software-disconnect function */
;;;96         USBD_CLR_SE0();
000002  f8d01090          LDR      r1,[r0,#0x90]
000006  f0210101          BIC      r1,r1,#1
00000a  f8c01090          STR      r1,[r0,#0x90]
;;;97         USBD->ATTR = 0x7D0ul;
00000e  f44f61fa          MOV      r1,#0x7d0
000012  6101              STR      r1,[r0,#0x10]
;;;98     
;;;99         /* Clear USB-related interrupts before enable interrupt */
;;;100        USBD_CLR_INT_FLAG(USBD_INT_BUS | USBD_INT_USB | USBD_INT_FLDET | USBD_INT_WAKEUP);
000014  f240110f          MOV      r1,#0x10f
000018  6041              STR      r1,[r0,#4]
;;;101    
;;;102        /* Enable USB-related interrupts. */
;;;103        USBD_ENABLE_INT(USBD_INT_BUS | USBD_INT_USB | USBD_INT_FLDET | USBD_INT_WAKEUP);
00001a  6802              LDR      r2,[r0,#0]
00001c  430a              ORRS     r2,r2,r1
00001e  6002              STR      r2,[r0,#0]
;;;104    }
000020  4770              BX       lr
;;;105    
                          ENDP

000022  0000              DCW      0x0000
                  |L14.36|
                          DCD      0x400c0000

                          AREA ||i.USBD_SwReset||, CODE, READONLY, ALIGN=2

                  USBD_SwReset PROC
;;;632      */
;;;633    void USBD_SwReset(void)
000000  480c              LDR      r0,|L15.52|
;;;634    {
000002  b510              PUSH     {r4,lr}
;;;635        uint32_t i;
;;;636    
;;;637        /* Reset all variables for protocol */
;;;638        g_usbd_CtrlInPointer = 0;
000004  2200              MOVS     r2,#0
;;;639        g_usbd_CtrlInSize = 0ul;
000006  6042              STR      r2,[r0,#4]  ; g_usbd_CtrlInPointer
000008  60c2              STR      r2,[r0,#0xc]  ; g_usbd_CtrlInSize
;;;640        g_usbd_CtrlOutPointer = 0;
;;;641        g_usbd_CtrlOutSize = 0ul;
00000a  6082              STR      r2,[r0,#8]  ; g_usbd_CtrlOutPointer
00000c  6102              STR      r2,[r0,#0x10]  ; g_usbd_CtrlOutSize
;;;642        g_usbd_CtrlOutSizeLimit = 0ul;
00000e  6142              STR      r2,[r0,#0x14]  ; g_usbd_CtrlOutSizeLimit
;;;643        g_u32EpStallLock = 0ul;
;;;644        memset(g_usbd_SetupPacket, 0, 8ul);
000010  6382              STR      r2,[r0,#0x38]  ; g_u32EpStallLock
000012  6402              STR      r2,[r0,#0x40]  ; g_usbd_SetupPacket
;;;645    
;;;646        /* Reset PID DATA0 */
;;;647        for(i=0ul; i<USBD_MAX_EP; i++)
000014  6442              STR      r2,[r0,#0x44]  ; g_usbd_SetupPacket
;;;648        {
;;;649            USBD->EP[i].CFG &= ~USBD_CFG_DSQSYNC_Msk;
000016  4b08              LDR      r3,|L15.56|
000018  4610              MOV      r0,r2                 ;647
                  |L15.26|
00001a  eb031100          ADD      r1,r3,r0,LSL #4
00001e  f8d14508          LDR      r4,[r1,#0x508]
000022  f0240480          BIC      r4,r4,#0x80
000026  f8c14508          STR      r4,[r1,#0x508]
00002a  1c40              ADDS     r0,r0,#1
00002c  280c              CMP      r0,#0xc               ;647
00002e  d3f4              BCC      |L15.26|
;;;650        }
;;;651    
;;;652        /* Reset USB device address */
;;;653        USBD_SET_ADDR(0ul);
000030  609a              STR      r2,[r3,#8]
;;;654    }
000032  bd10              POP      {r4,pc}
;;;655    
                          ENDP

                  |L15.52|
                          DCD      ||.data||
                  |L15.56|
                          DCD      0x400c0000

                          AREA ||.data||, DATA, ALIGN=2

                  g_usbd_RemoteWakeupEn
000000  00                DCB      0x00
                  u8ZeroFlag
000001  000000            DCB      0x00,0x00,0x00
                  g_usbd_CtrlInPointer
                          DCD      0x00000000
                  g_usbd_CtrlOutPointer
                          DCD      0x00000000
                  g_usbd_CtrlInSize
                          DCD      0x00000000
                  g_usbd_CtrlOutSize
                          DCD      0x00000000
                  g_usbd_CtrlOutSizeLimit
                          DCD      0x00000000
                  g_usbd_UsbAddr
                          DCD      0x00000000
                  g_usbd_UsbConfig
                          DCD      0x00000000
                  g_usbd_CtrlMaxPktSize
                          DCD      0x00000008
                  g_usbd_UsbAltInterface
                          DCD      0x00000000
                  g_usbd_pfnVendorRequest
                          DCD      0x00000000
                  g_usbd_pfnClassRequest
                          DCD      0x00000000
                  g_usbd_pfnSetInterface
                          DCD      0x00000000
                  g_usbd_pfnSetConfigCallback
                          DCD      0x00000000
                  g_u32EpStallLock
                          DCD      0x00000000
                  g_usbd_sInfo
                          DCD      0x00000000
                  g_usbd_SetupPacket
000040  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Library\\StdDriver\\src\\usbd.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_usbd_c_4b498b38____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_usbd_c_4b498b38____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_usbd_c_4b498b38____REVSH|
#line 402
|__asm___6_usbd_c_4b498b38____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_usbd_c_4b498b38____RRX|
#line 587
|__asm___6_usbd_c_4b498b38____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
